{"version":3,"sources":["lib/config.ts","ui/inquirer.ts","commands/config/index.ts","commands/daemon/index.ts","commands/index.ts","index.ts"],"names":[],"mappings":"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","file":"chaos.map","sourceRoot":"../src","sourcesContent":["import fs from 'fs'\nimport json from 'jsonfile'\nimport os from 'os'\nimport npath from 'path'\n\nexport const dir = npath.join(os.homedir(), '.chaos')\nexport const path = npath.join(dir, 'config.json')\n\nexport const init = () => {\n  if (!fs.existsSync(dir)) { fs.mkdirSync(dir) }\n  save({})\n}\n\nexport const exists = (): boolean => {\n  return fs.existsSync(dir) && fs.existsSync(path)\n}\n\nexport const save = (data: any) => {\n  return json.writeFileSync(path, data)\n}\n\nexport const load = (): any => {\n  return json.readFileSync(path)\n}\n","import * as inquirer from 'inquirer'\nimport Web3 from 'web3'\n\nconst web3 = new Web3()\nconst DEFAULTS = {\n  ADDRESS: '0xcdf45df24d878dd7e564a72802ba23031acfac07',\n  DEVICES: false,\n  ETHEREUM: 'https://mainnet.infura.io/v3/ab05225130e846b28dc1bb71d6d96f09',\n  IPFS: 'https://ipfs.infura.io:5001',\n  MNEMONIC: 'journey nice rather ball theme used uncover gate pond rifle between state'\n}\nconst regex = new RegExp(/(?:^|\\s)((https?:\\/\\/)?(?:localhost|[\\w-]+(?:\\.[\\w-]+)+)(:\\d+)?(\\/\\S*)?)/)\n\nexport const questions = {\n  /* tslint:disable:object-literal-sort-keys */\n  ipfs: {\n    name: 'ipfs',\n    type: 'input',\n    message: 'IPFS gateway: ',\n    default: DEFAULTS.IPFS,\n    validate: async (value: string) => {\n      if (value.match(regex)) {\n        return true\n      } else {\n        return 'Invalid URL'\n      }\n    }\n  },\n  ethereum: {\n    name: 'ethereum',\n    type: 'input',\n    message: 'Ethereum gateway: ',\n    default: DEFAULTS.ETHEREUM,\n    validate: async (value: string) => {\n      if (value.match(regex)) {\n        return true\n      } else {\n        return 'Invalid URL'\n      }\n    }\n  },\n  mnemonic: {\n    name: 'mnemonic',\n    type: 'input',\n    message: 'Mnemonic: ',\n    default: DEFAULTS.MNEMONIC\n  },\n  address: {\n    name: 'address',\n    type: 'input',\n    message: 'Contract address: ',\n    default: DEFAULTS.ADDRESS,\n    validate: async (value: string) => {\n      if (web3.isAddress(value)) {\n        return true\n      } else {\n        return 'Invalid address'\n      }\n    }\n  },\n  devices: {\n    name: 'devices',\n    type: 'confirm',\n    message: 'Enable devices: ',\n    default: DEFAULTS.DEVICES\n  }\n  /* tslint:enable:object-literal-sort-keys */\n}\n\nexport const prompt = {\n  configure: async (): Promise<any> => {\n    const ipfs = await inquirer.prompt(questions.ipfs)\n    const ethereum = await inquirer.prompt(questions.ethereum)\n    const mnemonic = await inquirer.prompt(questions.mnemonic)\n    const address = await inquirer.prompt(questions.address)\n    const devices = await inquirer.prompt(questions.devices)\n\n    return { ...ipfs, ...ethereum, ...mnemonic, ...address, ...devices }\n  }\n}\n\nexport default prompt\n","import * as chaosconfig from '../../lib/config'\nimport prompt from '../../ui/inquirer'\nimport yargs from 'yargs'\n\nconst builder = () => {\n  return yargs\n    .option('ipfs', {\n      describe: 'Set IPFS gateway address',\n      type: 'string'\n    })\n    .option('ethereum', {\n      describe: 'Set ethereum gateway address',\n      type: 'string'\n    })\n    .option('address', {\n      describe: 'Set contract address',\n      type: 'string'\n    })\n    .option('mnemonic', {\n      describe: 'Set ethereum account mnemonic',\n      type: 'string'\n    })\n    .option('devices', {\n      describe: 'Enable chaos machine devices',\n      type: 'boolean'\n    })\n    .help()\n    .version(false)\n}\n\nconst handler = async argv => {\n  try {\n    if(!chaosconfig.exists()) { chaosconfig.init() }\n\n    if(argv.ipfs) {\n      const current = chaosconfig.load()\n      current.ipfs = argv.ipfs\n      chaosconfig.save(current)\n    } else if (argv.ethereum) {\n      const current = chaosconfig.load()\n      current.ethereum = argv.ethereum\n      chaosconfig.save(current)\n    } else if (argv.address) {\n      const current = chaosconfig.load()\n      current.address = argv.address\n      chaosconfig.save(current)\n    } else if (argv.mnemonic) {\n      const current = chaosconfig.load()\n      current.mnemonic = argv.mnemonic\n      chaosconfig.save(current)\n    } else if (typeof argv.devices !== 'undefined') {\n      const current = chaosconfig.load()\n      current.devices = argv.devices\n      chaosconfig.save(current)\n    } else {\n      const configuration = await prompt.configure()\n      chaosconfig.save(configuration)\n    }\n  } catch (err) {\n    console.log('[error] ' + err.message)\n  }\n}\n\n/* tslint:disable:object-literal-sort-keys */\nexport const config = {\n  command: 'config',\n  desc: 'Configure the Chaos Machine',\n  builder,\n  handler\n}\n/* tslint:enable:object-literal-sort-keys */\n","import * as config from '../../lib/config'\nimport logo from 'asciiart-logo'\nimport { Machine } from '@chaosmachine/chaos.js'\nimport yargs from 'yargs'\n\nconst builder = () => {\n  return yargs\n    .help()\n    .version(false)\n}\n\nconst handler = async argv => {\n  try {\n    if (!config.exists()) {\n      console.log('You need to configure your chaos machine before you the daemon.')\n      console.log('Run: chaos config')\n    } else {\n      const opts = config.load()\n\n      console.log(\n        logo({\n          name: 'CHAOS',\n          font: '3D-ASCII',\n          lineChars: 15,\n          padding: 5,\n          margin: 2\n        })\n        .emptyLine()\n        .left('ipfs: ' + opts.ipfs)\n        .left('ethereum: ' + opts.ethereum)\n        .left('mnemonic: ' + opts.mnemonic)\n        .left('address: ' + opts.address)\n        .left('devices: ' + opts.devices)\n        .emptyLine()\n        .wrap('Have fun burning bills!')\n        .render()\n      )\n\n      const machine = await Machine.launch(opts)\n    }\n  } catch (err) {\n    console.log('[error] ' + err.message)\n  }\n}\n\n/* tslint:disable:object-literal-sort-keys */\nexport const daemon = {\n  command: 'daemon',\n  desc: 'Launch the Chaos Machine daemon',\n  builder,\n  handler\n}\n/* tslint:enable:object-literal-sort-keys */\n","export * from './config'\nexport * from './daemon'\n","import yargs from 'yargs'\nimport * as commands from './commands'\n\nconst argv = yargs\n  .usage('chaos <command>')\n  .command(commands.config)\n  .command(commands.daemon)\n  .demandCommand(1, 'No command provided')\n  .strict()\n  .help()\n  .alias('h', 'help').argv\n"]}