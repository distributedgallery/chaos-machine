{"version":3,"sources":["lib/config.ts","ui/inquirer.ts","commands/config/index.ts","commands/daemon/index.ts","commands/index.ts","index.ts"],"names":[],"mappings":"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","file":"chaos.map","sourceRoot":"../src","sourcesContent":["import fs from 'fs'\nimport json from 'jsonfile'\nimport os from 'os'\nimport npath from 'path'\n\nexport const dir = npath.join(os.homedir(), '.chaos')\nexport const path = npath.join(dir, 'config.json')\n\nexport const init = () => {\n  if (!fs.existsSync(dir)) { fs.mkdirSync(dir) }\n  save({})\n}\n\nexport const exists = (): boolean => {\n  return fs.existsSync(dir) && fs.existsSync(path)\n}\n\nexport const save = (data: any) => {\n  return json.writeFileSync(path, data)\n}\n\nexport const load = (): any => {\n  return json.readFileSync(path)\n}\n","import { Machine } from '@chaosmachine/chaos.js'\nimport * as inquirer from 'inquirer'\nimport Web3 from 'web3'\n\nconst web3  = new Web3()\nconst regex = new RegExp(/(?:^|\\s)((https?:\\/\\/)?(?:localhost|[\\w-]+(?:\\.[\\w-]+)+)(:\\d+)?(\\/\\S*)?)/)\n\nconst questions = {\n  /* tslint:disable:object-literal-sort-keys */\n  ipfs: {\n    name: 'ipfs',\n    type: 'input',\n    message: 'IPFS gateway: ',\n    default: Machine.defaults.ipfs,\n    validate: async (value: string) => {\n      if (value.match(regex)) {\n        return true\n      } else {\n        return 'Invalid URL'\n      }\n    }\n  },\n  ethereum: {\n    name: 'ethereum',\n    type: 'input',\n    message: 'Ethereum gateway: ',\n    default: Machine.defaults.ethereum,\n    validate: async (value: string) => {\n      if (value.match(regex)) {\n        return true\n      } else {\n        return 'Invalid URL'\n      }\n    }\n  },\n  contract: {\n    name: 'contract',\n    type: 'input',\n    message: 'Contract address: ',\n    default: Machine.defaults.contract,\n    validate: async (value: string) => {\n      if (web3.isAddress(value)) {\n        return true\n      } else {\n        return 'Invalid address'\n      }\n    }\n  },\n  devices: {\n    name: 'devices',\n    type: 'confirm',\n    message: 'Enable devices: ',\n    default: Machine.defaults.devices\n  }\n  /* tslint:enable:object-literal-sort-keys */\n}\n\nconst prompt = {\n  configure: async (): Promise<any> => {\n    const ipfs     = await inquirer.prompt(questions.ipfs)\n    const ethereum = await inquirer.prompt(questions.ethereum)\n    const contract = await inquirer.prompt(questions.contract)\n    const devices  = await inquirer.prompt(questions.devices)\n    return { ...ipfs, ...ethereum, ...contract, ...devices }\n  }\n}\n\nexport default prompt\n","import yargs from 'yargs'\nimport * as chaosconfig from '../../lib/config'\nimport prompt from '../../ui/inquirer'\n\nconst builder = () => {\n  return yargs\n    .option('ipfs', {\n      describe: 'Set IPFS gateway address',\n      type: 'string'\n    })\n    .option('ethereum', {\n      describe: 'Set ethereum gateway address',\n      type: 'string'\n    })\n    .option('contract', {\n      describe: 'Set chaos contract address',\n      type: 'string'\n    })\n    .option('devices', {\n      describe: 'Enable chaos machine devices',\n      type: 'boolean'\n    })\n    .help()\n    .version(false)\n}\n\nconst handler = async (argv) => {\n  try {\n    if (!chaosconfig.exists()) { chaosconfig.init() }\n\n    if (argv.ipfs) {\n      const current = chaosconfig.load()\n      current.ipfs = argv.ipfs\n      chaosconfig.save(current)\n    } else if (argv.ethereum) {\n      const current = chaosconfig.load()\n      current.ethereum = argv.ethereum\n      chaosconfig.save(current)\n    } else if (argv.contract) {\n      const current = chaosconfig.load()\n      current.contract = argv.contract\n      chaosconfig.save(current)\n    } else if (typeof argv.devices !== 'undefined') {\n      const current = chaosconfig.load()\n      current.devices = argv.devices\n      chaosconfig.save(current)\n    } else {\n      const configuration = await prompt.configure()\n      chaosconfig.save(configuration)\n    }\n  } catch (err) {\n    /* tslint:disable:no-console*/\n    console.log('[error] ' + err.message)\n    /* tslint:enable:no-console */\n  }\n}\n\n/* tslint:disable:object-literal-sort-keys */\nexport const config = {\n  command: 'config',\n  desc: 'Configure the Chaos Machine',\n  builder,\n  handler\n}\n/* tslint:enable:object-literal-sort-keys */\n","import { Machine } from '@chaosmachine/chaos.js'\nimport logo from 'asciiart-logo'\nimport yargs from 'yargs'\nimport * as config from '../../lib/config'\n\nconst builder = () => {\n  return yargs\n    .help()\n    .version(false)\n}\n\nconst handler = async (argv) => {\n  try {\n    if (!config.exists()) {\n      /* tslint:disable:no-console*/\n      console.log('You need to configure your chaos machine before you the daemon.')\n      console.log('Run: chaos config')\n      /* tslint:enable:no-console*/\n    } else {\n      const opts = config.load()\n\n      /* tslint:disable:no-console*/\n      console.log(\n        logo({\n          font: '3D-ASCII',\n          lineChars: 15,\n          margin: 2,\n          name: 'CHAOS',\n          padding: 5\n        })\n        .emptyLine()\n        .left('ipfs: ' + opts.ipfs)\n        .left('ethereum: ' + opts.ethereum)\n        .left('contract: ' + opts.contract)\n        .left('devices: ' + opts.devices)\n        .emptyLine()\n        .wrap('Have fun burning bills!')\n        .render()\n      )\n      /* tslint:enable:no-console*/\n\n      const machine = new Machine(opts)\n      await machine.start()\n    }\n  } catch (err) {\n    /* tslint:disable:no-console*/\n    console.log('[error] ' + err.message)\n    /* tslint:enable:no-console*/\n  }\n}\n\n/* tslint:disable:object-literal-sort-keys */\nexport const daemon = {\n  command: 'daemon',\n  desc: 'Launch the Chaos Machine daemon',\n  builder,\n  handler\n}\n/* tslint:enable:object-literal-sort-keys */\n","export * from './config'\nexport * from './daemon'\n","import yargs from 'yargs'\nimport * as commands from './commands'\n\nconst argv = yargs\n  .usage('chaos <command>')\n  .command(commands.config)\n  .command(commands.daemon)\n  .demandCommand(1, 'No command provided')\n  .strict()\n  .help()\n  .alias('h', 'help').argv\n"]}