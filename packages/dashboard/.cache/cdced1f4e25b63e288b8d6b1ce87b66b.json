{"id":"node_modules/@serialport/parser-ready/ready.js","dependencies":[{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/@serialport/parser-ready/package.json","includedInParent":true,"mtime":1535727511604},{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/package.json","includedInParent":true,"mtime":1535727539307},{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/.babelrc","includedInParent":true,"mtime":1533206516246},{"name":"safe-buffer","loc":{"line":2,"column":23},"parent":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/@serialport/parser-ready/ready.js","resolved":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/safe-buffer/index.js"},{"name":"stream","loc":{"line":3,"column":26},"parent":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/@serialport/parser-ready/ready.js","resolved":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/stream-browserify/index.js"}],"generated":{"js":"\n'use strict'\nconst Buffer = require('safe-buffer').Buffer\nconst Transform = require('stream').Transform\n\n/**\n * A transform stream that waits for a sequence of \"ready\" bytes before emitting a ready event and emitting data events\n * @summary To use the `Ready` parser provide a byte start sequence. After the bytes have been received a ready event is fired and data events are passed through.\n * @extends Transform\n * @example\nconst SerialPort = require('serialport')\nconst Ready = require('@serialport/parser-ready')\nconst port = new SerialPort('/dev/tty-usbserial1')\nconst parser = port.pipe(new Ready({ delimiter: 'READY' }))\nparser.on('ready', () => console.log('the ready byte sequence has been received'))\nparser.on('data', console.log) // all data after READY is received\n */\nclass ReadyParser extends Transform {\n  /**\n   *\n   * @param {object} options options for the parser\n   * @param {string|Buffer|array} options.delimiter data to look for before emitted \"ready\"\n   */\n  constructor (options) {\n    options = options || {}\n    if (options.delimiter === undefined) {\n      throw new TypeError('\"delimiter\" is not a bufferable object')\n    }\n\n    if (options.delimiter.length === 0) {\n      throw new TypeError('\"delimiter\" has a 0 or undefined length')\n    }\n\n    super(options)\n    this.delimiter = Buffer.from(options.delimiter)\n    this.readOffset = 0\n    this.ready = false\n  }\n\n  _transform (chunk, encoding, cb) {\n    if (this.ready) {\n      this.push(chunk)\n      return cb()\n    }\n    const delimiter = this.delimiter\n    let chunkOffset = 0\n    while (this.readOffset < delimiter.length && chunkOffset < chunk.length) {\n      if (delimiter[this.readOffset] === chunk[chunkOffset]) {\n        this.readOffset++\n      } else {\n        this.readOffset = 0\n      }\n      chunkOffset++\n    }\n    if (this.readOffset === delimiter.length) {\n      this.ready = true\n      this.emit('ready')\n      const chunkRest = chunk.slice(chunkOffset)\n      if (chunkRest.length > 0) {\n        this.push(chunkRest)\n      }\n    }\n    cb()\n  }\n}\n\nmodule.exports = ReadyParser\n","map":{"mappings":[{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@serialport/parser-ready/ready.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}}],"sources":{"node_modules/@serialport/parser-ready/ready.js":"'use strict'\nconst Buffer = require('safe-buffer').Buffer\nconst Transform = require('stream').Transform\n\n/**\n * A transform stream that waits for a sequence of \"ready\" bytes before emitting a ready event and emitting data events\n * @summary To use the `Ready` parser provide a byte start sequence. After the bytes have been received a ready event is fired and data events are passed through.\n * @extends Transform\n * @example\nconst SerialPort = require('serialport')\nconst Ready = require('@serialport/parser-ready')\nconst port = new SerialPort('/dev/tty-usbserial1')\nconst parser = port.pipe(new Ready({ delimiter: 'READY' }))\nparser.on('ready', () => console.log('the ready byte sequence has been received'))\nparser.on('data', console.log) // all data after READY is received\n */\nclass ReadyParser extends Transform {\n  /**\n   *\n   * @param {object} options options for the parser\n   * @param {string|Buffer|array} options.delimiter data to look for before emitted \"ready\"\n   */\n  constructor (options) {\n    options = options || {}\n    if (options.delimiter === undefined) {\n      throw new TypeError('\"delimiter\" is not a bufferable object')\n    }\n\n    if (options.delimiter.length === 0) {\n      throw new TypeError('\"delimiter\" has a 0 or undefined length')\n    }\n\n    super(options)\n    this.delimiter = Buffer.from(options.delimiter)\n    this.readOffset = 0\n    this.ready = false\n  }\n\n  _transform (chunk, encoding, cb) {\n    if (this.ready) {\n      this.push(chunk)\n      return cb()\n    }\n    const delimiter = this.delimiter\n    let chunkOffset = 0\n    while (this.readOffset < delimiter.length && chunkOffset < chunk.length) {\n      if (delimiter[this.readOffset] === chunk[chunkOffset]) {\n        this.readOffset++\n      } else {\n        this.readOffset = 0\n      }\n      chunkOffset++\n    }\n    if (this.readOffset === delimiter.length) {\n      this.ready = true\n      this.emit('ready')\n      const chunkRest = chunk.slice(chunkOffset)\n      if (chunkRest.length > 0) {\n        this.push(chunkRest)\n      }\n    }\n    cb()\n  }\n}\n\nmodule.exports = ReadyParser\n"},"lineCount":68}},"hash":"e6b1e84ac3c08a7059b4ce1932f181cf","cacheData":{"env":{}}}