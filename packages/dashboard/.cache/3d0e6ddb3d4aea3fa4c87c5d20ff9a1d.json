{"id":"node_modules/truffle-error/index.js","dependencies":[{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/truffle-error/package.json","includedInParent":true,"mtime":1535727512012},{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/package.json","includedInParent":true,"mtime":1535727539307},{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/.babelrc","includedInParent":true,"mtime":1533206516246},{"name":"./extendablebuiltin","loc":{"line":1,"column":32},"parent":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/truffle-error/index.js","resolved":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/truffle-error/extendablebuiltin.js"},{"name":"util","loc":{"line":2,"column":23},"parent":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/truffle-error/index.js","resolved":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/util/util.js"}],"generated":{"js":"var ExtendableBuiltin = require(\"./extendablebuiltin\");\nvar inherits = require(\"util\").inherits;\n\ninherits(ExtendableError, ExtendableBuiltin(Error));\n\n// From: http://stackoverflow.com/questions/31089801/extending-error-in-javascript-with-es6-syntax\nfunction ExtendableError(message) {\n  ExtendableError.super_.call(this);\n  this.message = message;\n  this.stack = (new Error(message)).stack;\n  this.name = this.constructor.name;\n};\n\n// Hack. Likely won't be formatted correctly when there are\n// 10 or more errors. But if there's 10 or more errors, I'm guessing\n// formatting won't matter so much.\nExtendableError.prototype.formatForMocha = function() {\n  this.message = this.message.replace(/\\n/g, \"\\n     \");\n};\n\nmodule.exports = ExtendableError;\n","map":{"mappings":[{"source":"node_modules/truffle-error/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/truffle-error/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/truffle-error/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/truffle-error/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/truffle-error/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/truffle-error/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/truffle-error/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/truffle-error/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/truffle-error/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/truffle-error/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/truffle-error/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/truffle-error/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/truffle-error/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/truffle-error/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/truffle-error/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/truffle-error/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/truffle-error/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/truffle-error/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/truffle-error/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/truffle-error/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/truffle-error/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/truffle-error/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}}],"sources":{"node_modules/truffle-error/index.js":"var ExtendableBuiltin = require(\"./extendablebuiltin\");\nvar inherits = require(\"util\").inherits;\n\ninherits(ExtendableError, ExtendableBuiltin(Error));\n\n// From: http://stackoverflow.com/questions/31089801/extending-error-in-javascript-with-es6-syntax\nfunction ExtendableError(message) {\n  ExtendableError.super_.call(this);\n  this.message = message;\n  this.stack = (new Error(message)).stack;\n  this.name = this.constructor.name;\n};\n\n// Hack. Likely won't be formatted correctly when there are\n// 10 or more errors. But if there's 10 or more errors, I'm guessing\n// formatting won't matter so much.\nExtendableError.prototype.formatForMocha = function() {\n  this.message = this.message.replace(/\\n/g, \"\\n     \");\n};\n\nmodule.exports = ExtendableError;\n"},"lineCount":22}},"hash":"3a7632c99683cc0742152539e225414b","cacheData":{"env":{}}}