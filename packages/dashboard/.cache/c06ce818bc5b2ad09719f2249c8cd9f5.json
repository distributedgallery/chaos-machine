{"id":"node_modules/web3/lib/solidity/coder.js","dependencies":[{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/web3/package.json","includedInParent":true,"mtime":1533122127394},{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/package.json","includedInParent":true,"mtime":1533219493444},{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/.babelrc","includedInParent":true,"mtime":1533206516246},{"name":"./formatters","loc":{"line":23,"column":16},"parent":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/web3/lib/solidity/coder.js","resolved":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/web3/lib/solidity/formatters.js"},{"name":"./address","loc":{"line":25,"column":34},"parent":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/web3/lib/solidity/coder.js","resolved":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/web3/lib/solidity/address.js"},{"name":"./bool","loc":{"line":26,"column":31},"parent":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/web3/lib/solidity/coder.js","resolved":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/web3/lib/solidity/bool.js"},{"name":"./int","loc":{"line":27,"column":30},"parent":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/web3/lib/solidity/coder.js","resolved":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/web3/lib/solidity/int.js"},{"name":"./uint","loc":{"line":28,"column":31},"parent":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/web3/lib/solidity/coder.js","resolved":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/web3/lib/solidity/uint.js"},{"name":"./dynamicbytes","loc":{"line":29,"column":39},"parent":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/web3/lib/solidity/coder.js","resolved":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/web3/lib/solidity/dynamicbytes.js"},{"name":"./string","loc":{"line":30,"column":33},"parent":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/web3/lib/solidity/coder.js","resolved":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/web3/lib/solidity/string.js"},{"name":"./real","loc":{"line":31,"column":31},"parent":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/web3/lib/solidity/coder.js","resolved":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/web3/lib/solidity/real.js"},{"name":"./ureal","loc":{"line":32,"column":32},"parent":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/web3/lib/solidity/coder.js","resolved":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/web3/lib/solidity/ureal.js"},{"name":"./bytes","loc":{"line":33,"column":32},"parent":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/web3/lib/solidity/coder.js","resolved":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/web3/lib/solidity/bytes.js"}],"generated":{"js":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file coder.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar f = require('./formatters');\n\nvar SolidityTypeAddress = require('./address');\nvar SolidityTypeBool = require('./bool');\nvar SolidityTypeInt = require('./int');\nvar SolidityTypeUInt = require('./uint');\nvar SolidityTypeDynamicBytes = require('./dynamicbytes');\nvar SolidityTypeString = require('./string');\nvar SolidityTypeReal = require('./real');\nvar SolidityTypeUReal = require('./ureal');\nvar SolidityTypeBytes = require('./bytes');\n\nvar isDynamic = function (solidityType, type) {\n   return solidityType.isDynamicType(type) ||\n          solidityType.isDynamicArray(type);\n};\n\n/**\n * SolidityCoder prototype should be used to encode/decode solidity params of any type\n */\nvar SolidityCoder = function (types) {\n    this._types = types;\n};\n\n/**\n * This method should be used to transform type to SolidityType\n *\n * @method _requireType\n * @param {String} type\n * @returns {SolidityType}\n * @throws {Error} throws if no matching type is found\n */\nSolidityCoder.prototype._requireType = function (type) {\n    var solidityType = this._types.filter(function (t) {\n        return t.isType(type);\n    })[0];\n\n    if (!solidityType) {\n        throw Error('invalid solidity type!: ' + type);\n    }\n\n    return solidityType;\n};\n\n/**\n * Should be used to encode plain param\n *\n * @method encodeParam\n * @param {String} type\n * @param {Object} plain param\n * @return {String} encoded plain param\n */\nSolidityCoder.prototype.encodeParam = function (type, param) {\n    return this.encodeParams([type], [param]);\n};\n\n/**\n * Should be used to encode list of params\n *\n * @method encodeParams\n * @param {Array} types\n * @param {Array} params\n * @return {String} encoded list of params\n */\nSolidityCoder.prototype.encodeParams = function (types, params) {\n    var solidityTypes = this.getSolidityTypes(types);\n\n    var encodeds = solidityTypes.map(function (solidityType, index) {\n        return solidityType.encode(params[index], types[index]);\n    });\n\n    var dynamicOffset = solidityTypes.reduce(function (acc, solidityType, index) {\n        var staticPartLength = solidityType.staticPartLength(types[index]);\n        var roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32;\n\n        return acc + (isDynamic(solidityTypes[index], types[index]) ?\n            32 :\n            roundedStaticPartLength);\n    }, 0);\n\n    var result = this.encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset);\n\n    return result;\n};\n\nSolidityCoder.prototype.encodeMultiWithOffset = function (types, solidityTypes, encodeds, dynamicOffset) {\n    var result = \"\";\n    var self = this;\n\n    types.forEach(function (type, i) {\n        if (isDynamic(solidityTypes[i], types[i])) {\n            result += f.formatInputInt(dynamicOffset).encode();\n            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n            dynamicOffset += e.length / 2;\n        } else {\n            // don't add length to dynamicOffset. it's already counted\n            result += self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n        }\n\n        // TODO: figure out nested arrays\n    });\n\n    types.forEach(function (type, i) {\n        if (isDynamic(solidityTypes[i], types[i])) {\n            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n            dynamicOffset += e.length / 2;\n            result += e;\n        }\n    });\n    return result;\n};\n\nSolidityCoder.prototype.encodeWithOffset = function (type, solidityType, encoded, offset) {\n    /* jshint maxcomplexity: 17 */\n    /* jshint maxdepth: 5 */\n\n    var self = this;\n    var encodingMode={dynamic:1,static:2,other:3};\n\n    var mode=(solidityType.isDynamicArray(type)?encodingMode.dynamic:(solidityType.isStaticArray(type)?encodingMode.static:encodingMode.other));\n\n    if(mode !== encodingMode.other){\n        var nestedName = solidityType.nestedName(type);\n        var nestedStaticPartLength = solidityType.staticPartLength(nestedName);\n        var result = (mode === encodingMode.dynamic ? encoded[0] : '');\n\n        if (solidityType.isDynamicArray(nestedName)) {\n            var previousLength = (mode === encodingMode.dynamic ? 2 : 0);\n\n            for (var i = 0; i < encoded.length; i++) {\n                // calculate length of previous item\n                if(mode === encodingMode.dynamic){\n                    previousLength += +(encoded[i - 1])[0] || 0;\n                }\n                else if(mode === encodingMode.static){\n                    previousLength += +(encoded[i - 1] || [])[0] || 0;\n                }\n                result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();\n            }\n        }\n\n        var len= (mode === encodingMode.dynamic ? encoded.length-1 : encoded.length);\n        for (var c = 0; c < len; c++) {\n            var additionalOffset = result / 2;\n            if(mode === encodingMode.dynamic){\n                result += self.encodeWithOffset(nestedName, solidityType, encoded[c + 1], offset +  additionalOffset);\n            }\n            else if(mode === encodingMode.static){\n                result += self.encodeWithOffset(nestedName, solidityType, encoded[c], offset + additionalOffset);\n            }\n        }\n\n        return result;\n    }\n\n    return encoded;\n};\n\n\n/**\n * Should be used to decode bytes to plain param\n *\n * @method decodeParam\n * @param {String} type\n * @param {String} bytes\n * @return {Object} plain param\n */\nSolidityCoder.prototype.decodeParam = function (type, bytes) {\n    return this.decodeParams([type], bytes)[0];\n};\n\n/**\n * Should be used to decode list of params\n *\n * @method decodeParam\n * @param {Array} types\n * @param {String} bytes\n * @return {Array} array of plain params\n */\nSolidityCoder.prototype.decodeParams = function (types, bytes) {\n    var solidityTypes = this.getSolidityTypes(types);\n    var offsets = this.getOffsets(types, solidityTypes);\n\n    return solidityTypes.map(function (solidityType, index) {\n        return solidityType.decode(bytes, offsets[index],  types[index], index);\n    });\n};\n\nSolidityCoder.prototype.getOffsets = function (types, solidityTypes) {\n    var lengths =  solidityTypes.map(function (solidityType, index) {\n        return solidityType.staticPartLength(types[index]);\n    });\n\n    for (var i = 1; i < lengths.length; i++) {\n         // sum with length of previous element\n        lengths[i] += lengths[i - 1];\n    }\n\n    return lengths.map(function (length, index) {\n        // remove the current length, so the length is sum of previous elements\n        var staticPartLength = solidityTypes[index].staticPartLength(types[index]);\n        return length - staticPartLength;\n    });\n};\n\nSolidityCoder.prototype.getSolidityTypes = function (types) {\n    var self = this;\n    return types.map(function (type) {\n        return self._requireType(type);\n    });\n};\n\nvar coder = new SolidityCoder([\n    new SolidityTypeAddress(),\n    new SolidityTypeBool(),\n    new SolidityTypeInt(),\n    new SolidityTypeUInt(),\n    new SolidityTypeDynamicBytes(),\n    new SolidityTypeBytes(),\n    new SolidityTypeString(),\n    new SolidityTypeReal(),\n    new SolidityTypeUReal()\n]);\n\nmodule.exports = coder;\n","map":{"mappings":[{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/web3/lib/solidity/coder.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}}],"sources":{"node_modules/web3/lib/solidity/coder.js":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file coder.js\n * @author Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar f = require('./formatters');\n\nvar SolidityTypeAddress = require('./address');\nvar SolidityTypeBool = require('./bool');\nvar SolidityTypeInt = require('./int');\nvar SolidityTypeUInt = require('./uint');\nvar SolidityTypeDynamicBytes = require('./dynamicbytes');\nvar SolidityTypeString = require('./string');\nvar SolidityTypeReal = require('./real');\nvar SolidityTypeUReal = require('./ureal');\nvar SolidityTypeBytes = require('./bytes');\n\nvar isDynamic = function (solidityType, type) {\n   return solidityType.isDynamicType(type) ||\n          solidityType.isDynamicArray(type);\n};\n\n/**\n * SolidityCoder prototype should be used to encode/decode solidity params of any type\n */\nvar SolidityCoder = function (types) {\n    this._types = types;\n};\n\n/**\n * This method should be used to transform type to SolidityType\n *\n * @method _requireType\n * @param {String} type\n * @returns {SolidityType}\n * @throws {Error} throws if no matching type is found\n */\nSolidityCoder.prototype._requireType = function (type) {\n    var solidityType = this._types.filter(function (t) {\n        return t.isType(type);\n    })[0];\n\n    if (!solidityType) {\n        throw Error('invalid solidity type!: ' + type);\n    }\n\n    return solidityType;\n};\n\n/**\n * Should be used to encode plain param\n *\n * @method encodeParam\n * @param {String} type\n * @param {Object} plain param\n * @return {String} encoded plain param\n */\nSolidityCoder.prototype.encodeParam = function (type, param) {\n    return this.encodeParams([type], [param]);\n};\n\n/**\n * Should be used to encode list of params\n *\n * @method encodeParams\n * @param {Array} types\n * @param {Array} params\n * @return {String} encoded list of params\n */\nSolidityCoder.prototype.encodeParams = function (types, params) {\n    var solidityTypes = this.getSolidityTypes(types);\n\n    var encodeds = solidityTypes.map(function (solidityType, index) {\n        return solidityType.encode(params[index], types[index]);\n    });\n\n    var dynamicOffset = solidityTypes.reduce(function (acc, solidityType, index) {\n        var staticPartLength = solidityType.staticPartLength(types[index]);\n        var roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32;\n\n        return acc + (isDynamic(solidityTypes[index], types[index]) ?\n            32 :\n            roundedStaticPartLength);\n    }, 0);\n\n    var result = this.encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset);\n\n    return result;\n};\n\nSolidityCoder.prototype.encodeMultiWithOffset = function (types, solidityTypes, encodeds, dynamicOffset) {\n    var result = \"\";\n    var self = this;\n\n    types.forEach(function (type, i) {\n        if (isDynamic(solidityTypes[i], types[i])) {\n            result += f.formatInputInt(dynamicOffset).encode();\n            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n            dynamicOffset += e.length / 2;\n        } else {\n            // don't add length to dynamicOffset. it's already counted\n            result += self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n        }\n\n        // TODO: figure out nested arrays\n    });\n\n    types.forEach(function (type, i) {\n        if (isDynamic(solidityTypes[i], types[i])) {\n            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);\n            dynamicOffset += e.length / 2;\n            result += e;\n        }\n    });\n    return result;\n};\n\nSolidityCoder.prototype.encodeWithOffset = function (type, solidityType, encoded, offset) {\n    /* jshint maxcomplexity: 17 */\n    /* jshint maxdepth: 5 */\n\n    var self = this;\n    var encodingMode={dynamic:1,static:2,other:3};\n\n    var mode=(solidityType.isDynamicArray(type)?encodingMode.dynamic:(solidityType.isStaticArray(type)?encodingMode.static:encodingMode.other));\n\n    if(mode !== encodingMode.other){\n        var nestedName = solidityType.nestedName(type);\n        var nestedStaticPartLength = solidityType.staticPartLength(nestedName);\n        var result = (mode === encodingMode.dynamic ? encoded[0] : '');\n\n        if (solidityType.isDynamicArray(nestedName)) {\n            var previousLength = (mode === encodingMode.dynamic ? 2 : 0);\n\n            for (var i = 0; i < encoded.length; i++) {\n                // calculate length of previous item\n                if(mode === encodingMode.dynamic){\n                    previousLength += +(encoded[i - 1])[0] || 0;\n                }\n                else if(mode === encodingMode.static){\n                    previousLength += +(encoded[i - 1] || [])[0] || 0;\n                }\n                result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();\n            }\n        }\n\n        var len= (mode === encodingMode.dynamic ? encoded.length-1 : encoded.length);\n        for (var c = 0; c < len; c++) {\n            var additionalOffset = result / 2;\n            if(mode === encodingMode.dynamic){\n                result += self.encodeWithOffset(nestedName, solidityType, encoded[c + 1], offset +  additionalOffset);\n            }\n            else if(mode === encodingMode.static){\n                result += self.encodeWithOffset(nestedName, solidityType, encoded[c], offset + additionalOffset);\n            }\n        }\n\n        return result;\n    }\n\n    return encoded;\n};\n\n\n/**\n * Should be used to decode bytes to plain param\n *\n * @method decodeParam\n * @param {String} type\n * @param {String} bytes\n * @return {Object} plain param\n */\nSolidityCoder.prototype.decodeParam = function (type, bytes) {\n    return this.decodeParams([type], bytes)[0];\n};\n\n/**\n * Should be used to decode list of params\n *\n * @method decodeParam\n * @param {Array} types\n * @param {String} bytes\n * @return {Array} array of plain params\n */\nSolidityCoder.prototype.decodeParams = function (types, bytes) {\n    var solidityTypes = this.getSolidityTypes(types);\n    var offsets = this.getOffsets(types, solidityTypes);\n\n    return solidityTypes.map(function (solidityType, index) {\n        return solidityType.decode(bytes, offsets[index],  types[index], index);\n    });\n};\n\nSolidityCoder.prototype.getOffsets = function (types, solidityTypes) {\n    var lengths =  solidityTypes.map(function (solidityType, index) {\n        return solidityType.staticPartLength(types[index]);\n    });\n\n    for (var i = 1; i < lengths.length; i++) {\n         // sum with length of previous element\n        lengths[i] += lengths[i - 1];\n    }\n\n    return lengths.map(function (length, index) {\n        // remove the current length, so the length is sum of previous elements\n        var staticPartLength = solidityTypes[index].staticPartLength(types[index]);\n        return length - staticPartLength;\n    });\n};\n\nSolidityCoder.prototype.getSolidityTypes = function (types) {\n    var self = this;\n    return types.map(function (type) {\n        return self._requireType(type);\n    });\n};\n\nvar coder = new SolidityCoder([\n    new SolidityTypeAddress(),\n    new SolidityTypeBool(),\n    new SolidityTypeInt(),\n    new SolidityTypeUInt(),\n    new SolidityTypeDynamicBytes(),\n    new SolidityTypeBytes(),\n    new SolidityTypeString(),\n    new SolidityTypeReal(),\n    new SolidityTypeUReal()\n]);\n\nmodule.exports = coder;\n"},"lineCount":248}},"hash":"24d45efa36c7a519adb979a99e59350f","cacheData":{"env":{}}}