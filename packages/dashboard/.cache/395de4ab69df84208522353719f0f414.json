{"id":"node_modules/@serialport/parser-readline/readline.js","dependencies":[{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/@serialport/parser-readline/package.json","includedInParent":true,"mtime":1535727511604},{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/package.json","includedInParent":true,"mtime":1535727539307},{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/.babelrc","includedInParent":true,"mtime":1533206516246},{"name":"safe-buffer","loc":{"line":2,"column":23},"parent":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/@serialport/parser-readline/readline.js","resolved":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/safe-buffer/index.js"},{"name":"@serialport/parser-delimiter","loc":{"line":3,"column":32},"parent":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/@serialport/parser-readline/readline.js","resolved":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/@serialport/parser-delimiter/delimiter.js"}],"generated":{"js":"\n'use strict'\nconst Buffer = require('safe-buffer').Buffer\nconst DelimiterParser = require('@serialport/parser-delimiter')\n\n/**\n *  A transform stream that emits data after a newline delimiter is received.\n * @summary To use the `Readline` parser, provide a delimiter (defaults to `\\n`). Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).\n * @extends DelimiterParser\n * @example\nconst SerialPort = require('serialport')\nconst Readline = require('@serialport/parser-readline')\nconst port = new SerialPort('/dev/tty-usbserial1')\nconst parser = port.pipe(new Readline({ delimiter: '\\r\\n' }))\nparser.on('data', console.log)\n*/\nclass ReadLineParser extends DelimiterParser {\n  constructor (options) {\n    const opts = Object.assign({\n      delimiter: Buffer.from('\\n', 'utf8'),\n      encoding: 'utf8'\n    }, options)\n\n    if (typeof opts.delimiter === 'string') {\n      opts.delimiter = Buffer.from(opts.delimiter, opts.encoding)\n    }\n\n    super(opts)\n  }\n}\n\nmodule.exports = ReadLineParser\n","map":{"mappings":[{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@serialport/parser-readline/readline.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}}],"sources":{"node_modules/@serialport/parser-readline/readline.js":"'use strict'\nconst Buffer = require('safe-buffer').Buffer\nconst DelimiterParser = require('@serialport/parser-delimiter')\n\n/**\n *  A transform stream that emits data after a newline delimiter is received.\n * @summary To use the `Readline` parser, provide a delimiter (defaults to `\\n`). Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).\n * @extends DelimiterParser\n * @example\nconst SerialPort = require('serialport')\nconst Readline = require('@serialport/parser-readline')\nconst port = new SerialPort('/dev/tty-usbserial1')\nconst parser = port.pipe(new Readline({ delimiter: '\\r\\n' }))\nparser.on('data', console.log)\n*/\nclass ReadLineParser extends DelimiterParser {\n  constructor (options) {\n    const opts = Object.assign({\n      delimiter: Buffer.from('\\n', 'utf8'),\n      encoding: 'utf8'\n    }, options)\n\n    if (typeof opts.delimiter === 'string') {\n      opts.delimiter = Buffer.from(opts.delimiter, opts.encoding)\n    }\n\n    super(opts)\n  }\n}\n\nmodule.exports = ReadLineParser\n"},"lineCount":33}},"hash":"26c773f9af78bd046dd849cf6f1af57b","cacheData":{"env":{}}}