{"id":"sidD","dependencies":[{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/ipfs-api/package.json","includedInParent":true,"mtime":1533205844951},{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/package.json","includedInParent":true,"mtime":1535727154596},{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/.babelrc","includedInParent":true,"mtime":1533206516246},{"name":"promisify-es6","loc":{"line":3,"column":26},"parent":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/ipfs-api/src/log/level.js","resolved":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/promisify-es6/index.js"}],"generated":{"js":"\"use strict\";var e=require(\"promisify-es6\");module.exports=function(r){return e(function(e,t,i,n){return\"function\"==typeof i&&(n=i,i={}),\"string\"!=typeof e?n(new Error(\"Invalid subsystem type\")):\"string\"!=typeof t?n(new Error(\"Invalid level type\")):void r({path:\"log/level\",args:[e,t],qs:i,files:void 0,buffer:!0},n)})};","map":{"mappings":[{"source":"node_modules/ipfs-api/src/log/level.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/ipfs-api/src/log/level.js","original":{"line":3,"column":0},"generated":{"line":1,"column":13}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"promisify","original":{"line":3,"column":6},"generated":{"line":1,"column":17}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"require","original":{"line":3,"column":18},"generated":{"line":1,"column":19}},{"source":"node_modules/ipfs-api/src/log/level.js","original":{"line":3,"column":26},"generated":{"line":1,"column":27}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"module","original":{"line":5,"column":0},"generated":{"line":1,"column":44}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"exports","original":{"line":5,"column":7},"generated":{"line":1,"column":51}},{"source":"node_modules/ipfs-api/src/log/level.js","original":{"line":5,"column":17},"generated":{"line":1,"column":59}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"send","original":{"line":5,"column":18},"generated":{"line":1,"column":68}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"promisify","original":{"line":6,"column":9},"generated":{"line":1,"column":71}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"promisify","original":{"line":6,"column":9},"generated":{"line":1,"column":78}},{"source":"node_modules/ipfs-api/src/log/level.js","original":{"line":6,"column":19},"generated":{"line":1,"column":80}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"subsystem","original":{"line":6,"column":20},"generated":{"line":1,"column":89}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"level","original":{"line":6,"column":31},"generated":{"line":1,"column":91}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"opts","original":{"line":6,"column":38},"generated":{"line":1,"column":93}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"callback","original":{"line":6,"column":44},"generated":{"line":1,"column":95}},{"source":"node_modules/ipfs-api/src/log/level.js","original":{"line":11,"column":8},"generated":{"line":1,"column":98}},{"source":"node_modules/ipfs-api/src/log/level.js","original":{"line":7,"column":24},"generated":{"line":1,"column":104}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"opts","original":{"line":7,"column":15},"generated":{"line":1,"column":123}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"opts","original":{"line":8,"column":17},"generated":{"line":1,"column":127}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"opts","original":{"line":8,"column":17},"generated":{"line":1,"column":129}},{"source":"node_modules/ipfs-api/src/log/level.js","original":{"line":9,"column":13},"generated":{"line":1,"column":131}},{"source":"node_modules/ipfs-api/src/log/level.js","original":{"line":9,"column":13},"generated":{"line":1,"column":133}},{"source":"node_modules/ipfs-api/src/log/level.js","original":{"line":11,"column":29},"generated":{"line":1,"column":137}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"subsystem","original":{"line":11,"column":15},"generated":{"line":1,"column":154}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"callback","original":{"line":12,"column":13},"generated":{"line":1,"column":156}},{"source":"node_modules/ipfs-api/src/log/level.js","original":{"line":12,"column":22},"generated":{"line":1,"column":158}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"Error","original":{"line":12,"column":26},"generated":{"line":1,"column":162}},{"source":"node_modules/ipfs-api/src/log/level.js","original":{"line":12,"column":32},"generated":{"line":1,"column":168}},{"source":"node_modules/ipfs-api/src/log/level.js","original":{"line":15,"column":25},"generated":{"line":1,"column":195}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"level","original":{"line":15,"column":15},"generated":{"line":1,"column":212}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"callback","original":{"line":16,"column":13},"generated":{"line":1,"column":214}},{"source":"node_modules/ipfs-api/src/log/level.js","original":{"line":16,"column":22},"generated":{"line":1,"column":216}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"Error","original":{"line":16,"column":26},"generated":{"line":1,"column":220}},{"source":"node_modules/ipfs-api/src/log/level.js","original":{"line":16,"column":32},"generated":{"line":1,"column":226}},{"source":"node_modules/ipfs-api/src/log/level.js","original":{"line":19,"column":9},"generated":{"line":1,"column":254}},{"source":"node_modules/ipfs-api/src/log/level.js","original":{"line":19,"column":9},"generated":{"line":1,"column":256}},{"source":"node_modules/ipfs-api/src/log/level.js","original":{"line":20,"column":12},"generated":{"line":1,"column":257}},{"source":"node_modules/ipfs-api/src/log/level.js","original":{"line":20,"column":12},"generated":{"line":1,"column":262}},{"source":"node_modules/ipfs-api/src/log/level.js","original":{"line":21,"column":12},"generated":{"line":1,"column":274}},{"source":"node_modules/ipfs-api/src/log/level.js","original":{"line":21,"column":12},"generated":{"line":1,"column":279}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"subsystem","original":{"line":21,"column":13},"generated":{"line":1,"column":280}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"level","original":{"line":21,"column":24},"generated":{"line":1,"column":282}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"opts","original":{"line":22,"column":10},"generated":{"line":1,"column":285}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"opts","original":{"line":22,"column":10},"generated":{"line":1,"column":288}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"undefined","original":{"line":23,"column":13},"generated":{"line":1,"column":290}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"undefined","original":{"line":23,"column":13},"generated":{"line":1,"column":301}},{"source":"node_modules/ipfs-api/src/log/level.js","original":{"line":24,"column":14},"generated":{"line":1,"column":303}},{"source":"node_modules/ipfs-api/src/log/level.js","original":{"line":24,"column":14},"generated":{"line":1,"column":311}},{"source":"node_modules/ipfs-api/src/log/level.js","name":"callback","original":{"line":25,"column":7},"generated":{"line":1,"column":314}}],"sources":{"node_modules/ipfs-api/src/log/level.js":"'use strict'\n\nconst promisify = require('promisify-es6')\n\nmodule.exports = (send) => {\n  return promisify((subsystem, level, opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts\n      opts = {}\n    }\n    if (typeof subsystem !== 'string') {\n      return callback(new Error('Invalid subsystem type'))\n    }\n\n    if (typeof level !== 'string') {\n      return callback(new Error('Invalid level type'))\n    }\n\n    send({\n      path: 'log/level',\n      args: [subsystem, level],\n      qs: opts,\n      files: undefined,\n      buffer: true\n    }, callback)\n  })\n}\n"},"lineCount":null}},"hash":"d1fd83100080a8cceed7b241fe1fd5e4","cacheData":{"env":{}}}