{"id":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","dependencies":[{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/truffle-contract-schema/node_modules/ajv/package.json","includedInParent":true,"mtime":1535727512162},{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/package.json","includedInParent":true,"mtime":1535727539307},{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/.babelrc","includedInParent":true,"mtime":1533206516246},{"name":"./error_classes","loc":{"line":3,"column":30},"parent":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","resolved":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/error_classes.js"}],"generated":{"js":"'use strict';\n\nvar MissingRefError = require('./error_classes').MissingRef;\n\nmodule.exports = compileAsync;\n\n\n/**\n * Creates validating function for passed schema with asynchronous loading of missing schemas.\n * `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.\n * @this  Ajv\n * @param {Object}   schema schema object\n * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped\n * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.\n * @return {Promise} promise that resolves with a validating function.\n */\nfunction compileAsync(schema, meta, callback) {\n  /* eslint no-shadow: 0 */\n  /* global Promise */\n  /* jshint validthis: true */\n  var self = this;\n  if (typeof this._opts.loadSchema != 'function')\n    throw new Error('options.loadSchema should be a function');\n\n  if (typeof meta == 'function') {\n    callback = meta;\n    meta = undefined;\n  }\n\n  var p = loadMetaSchemaOf(schema).then(function () {\n    var schemaObj = self._addSchema(schema, undefined, meta);\n    return schemaObj.validate || _compileAsync(schemaObj);\n  });\n\n  if (callback) {\n    p.then(\n      function(v) { callback(null, v); },\n      callback\n    );\n  }\n\n  return p;\n\n\n  function loadMetaSchemaOf(sch) {\n    var $schema = sch.$schema;\n    return $schema && !self.getSchema($schema)\n            ? compileAsync.call(self, { $ref: $schema }, true)\n            : Promise.resolve();\n  }\n\n\n  function _compileAsync(schemaObj) {\n    try { return self._compile(schemaObj); }\n    catch(e) {\n      if (e instanceof MissingRefError) return loadMissingSchema(e);\n      throw e;\n    }\n\n\n    function loadMissingSchema(e) {\n      var ref = e.missingSchema;\n      if (added(ref)) throw new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved');\n\n      var schemaPromise = self._loadingSchemas[ref];\n      if (!schemaPromise) {\n        schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);\n        schemaPromise.then(removePromise, removePromise);\n      }\n\n      return schemaPromise.then(function (sch) {\n        if (!added(ref)) {\n          return loadMetaSchemaOf(sch).then(function () {\n            if (!added(ref)) self.addSchema(sch, ref, undefined, meta);\n          });\n        }\n      }).then(function() {\n        return _compileAsync(schemaObj);\n      });\n\n      function removePromise() {\n        delete self._loadingSchemas[ref];\n      }\n\n      function added(ref) {\n        return self._refs[ref] || self._schemas[ref];\n      }\n    }\n  }\n}\n","map":{"mappings":[{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}}],"sources":{"node_modules/truffle-contract-schema/node_modules/ajv/lib/compile/async.js":"'use strict';\n\nvar MissingRefError = require('./error_classes').MissingRef;\n\nmodule.exports = compileAsync;\n\n\n/**\n * Creates validating function for passed schema with asynchronous loading of missing schemas.\n * `loadSchema` option should be a function that accepts schema uri and returns promise that resolves with the schema.\n * @this  Ajv\n * @param {Object}   schema schema object\n * @param {Boolean}  meta optional true to compile meta-schema; this parameter can be skipped\n * @param {Function} callback an optional node-style callback, it is called with 2 parameters: error (or null) and validating function.\n * @return {Promise} promise that resolves with a validating function.\n */\nfunction compileAsync(schema, meta, callback) {\n  /* eslint no-shadow: 0 */\n  /* global Promise */\n  /* jshint validthis: true */\n  var self = this;\n  if (typeof this._opts.loadSchema != 'function')\n    throw new Error('options.loadSchema should be a function');\n\n  if (typeof meta == 'function') {\n    callback = meta;\n    meta = undefined;\n  }\n\n  var p = loadMetaSchemaOf(schema).then(function () {\n    var schemaObj = self._addSchema(schema, undefined, meta);\n    return schemaObj.validate || _compileAsync(schemaObj);\n  });\n\n  if (callback) {\n    p.then(\n      function(v) { callback(null, v); },\n      callback\n    );\n  }\n\n  return p;\n\n\n  function loadMetaSchemaOf(sch) {\n    var $schema = sch.$schema;\n    return $schema && !self.getSchema($schema)\n            ? compileAsync.call(self, { $ref: $schema }, true)\n            : Promise.resolve();\n  }\n\n\n  function _compileAsync(schemaObj) {\n    try { return self._compile(schemaObj); }\n    catch(e) {\n      if (e instanceof MissingRefError) return loadMissingSchema(e);\n      throw e;\n    }\n\n\n    function loadMissingSchema(e) {\n      var ref = e.missingSchema;\n      if (added(ref)) throw new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved');\n\n      var schemaPromise = self._loadingSchemas[ref];\n      if (!schemaPromise) {\n        schemaPromise = self._loadingSchemas[ref] = self._opts.loadSchema(ref);\n        schemaPromise.then(removePromise, removePromise);\n      }\n\n      return schemaPromise.then(function (sch) {\n        if (!added(ref)) {\n          return loadMetaSchemaOf(sch).then(function () {\n            if (!added(ref)) self.addSchema(sch, ref, undefined, meta);\n          });\n        }\n      }).then(function() {\n        return _compileAsync(schemaObj);\n      });\n\n      function removePromise() {\n        delete self._loadingSchemas[ref];\n      }\n\n      function added(ref) {\n        return self._refs[ref] || self._schemas[ref];\n      }\n    }\n  }\n}\n"},"lineCount":91}},"hash":"d2235cf558e140423afcf9ce28bca0fc","cacheData":{"env":{}}}