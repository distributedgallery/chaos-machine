{"id":"node_modules/dijkstrajs/dijkstra.js","dependencies":[{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/dijkstrajs/package.json","includedInParent":true,"mtime":1535727513052},{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/package.json","includedInParent":true,"mtime":1535727539307},{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/.babelrc","includedInParent":true,"mtime":1533206516246}],"generated":{"js":"'use strict';\n\n/******************************************************************************\n * Created 2008-08-19.\n *\n * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.\n *\n * Copyright (C) 2008\n *   Wyatt Baldwin <self@wyattbaldwin.com>\n *   All rights reserved\n *\n * Licensed under the MIT license.\n *\n *   http://www.opensource.org/licenses/mit-license.php\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *****************************************************************************/\nvar dijkstra = {\n  single_source_shortest_paths: function(graph, s, d) {\n    // Predecessor map for each node that has been encountered.\n    // node ID => predecessor node ID\n    var predecessors = {};\n\n    // Costs of shortest paths from s to all nodes encountered.\n    // node ID => cost\n    var costs = {};\n    costs[s] = 0;\n\n    // Costs of shortest paths from s to all nodes encountered; differs from\n    // `costs` in that it provides easy access to the node that currently has\n    // the known shortest path from s.\n    // XXX: Do we actually need both `costs` and `open`?\n    var open = dijkstra.PriorityQueue.make();\n    open.push(s, 0);\n\n    var closest,\n        u, v,\n        cost_of_s_to_u,\n        adjacent_nodes,\n        cost_of_e,\n        cost_of_s_to_u_plus_cost_of_e,\n        cost_of_s_to_v,\n        first_visit;\n    while (!open.empty()) {\n      // In the nodes remaining in graph that have a known cost from s,\n      // find the node, u, that currently has the shortest path from s.\n      closest = open.pop();\n      u = closest.value;\n      cost_of_s_to_u = closest.cost;\n\n      // Get nodes adjacent to u...\n      adjacent_nodes = graph[u] || {};\n\n      // ...and explore the edges that connect u to those nodes, updating\n      // the cost of the shortest paths to any or all of those nodes as\n      // necessary. v is the node across the current edge from u.\n      for (v in adjacent_nodes) {\n        if (adjacent_nodes.hasOwnProperty(v)) {\n          // Get the cost of the edge running from u to v.\n          cost_of_e = adjacent_nodes[v];\n\n          // Cost of s to u plus the cost of u to v across e--this is *a*\n          // cost from s to v that may or may not be less than the current\n          // known cost to v.\n          cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;\n\n          // If we haven't visited v yet OR if the current known cost from s to\n          // v is greater than the new cost we just found (cost of s to u plus\n          // cost of u to v across e), update v's cost in the cost list and\n          // update v's predecessor in the predecessor list (it's now u).\n          cost_of_s_to_v = costs[v];\n          first_visit = (typeof costs[v] === 'undefined');\n          if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {\n            costs[v] = cost_of_s_to_u_plus_cost_of_e;\n            open.push(v, cost_of_s_to_u_plus_cost_of_e);\n            predecessors[v] = u;\n          }\n        }\n      }\n    }\n\n    if (typeof d !== 'undefined' && typeof costs[d] === 'undefined') {\n      var msg = ['Could not find a path from ', s, ' to ', d, '.'].join('');\n      throw new Error(msg);\n    }\n\n    return predecessors;\n  },\n\n  extract_shortest_path_from_predecessor_list: function(predecessors, d) {\n    var nodes = [];\n    var u = d;\n    var predecessor;\n    while (u) {\n      nodes.push(u);\n      predecessor = predecessors[u];\n      u = predecessors[u];\n    }\n    nodes.reverse();\n    return nodes;\n  },\n\n  find_path: function(graph, s, d) {\n    var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);\n    return dijkstra.extract_shortest_path_from_predecessor_list(\n      predecessors, d);\n  },\n\n  /**\n   * A very naive priority queue implementation.\n   */\n  PriorityQueue: {\n    make: function (opts) {\n      var T = dijkstra.PriorityQueue,\n          t = {},\n          key;\n      opts = opts || {};\n      for (key in T) {\n        if (T.hasOwnProperty(key)) {\n          t[key] = T[key];\n        }\n      }\n      t.queue = [];\n      t.sorter = opts.sorter || T.default_sorter;\n      return t;\n    },\n\n    default_sorter: function (a, b) {\n      return a.cost - b.cost;\n    },\n\n    /**\n     * Add a new item to the queue and ensure the highest priority element\n     * is at the front of the queue.\n     */\n    push: function (value, cost) {\n      var item = {value: value, cost: cost};\n      this.queue.push(item);\n      this.queue.sort(this.sorter);\n    },\n\n    /**\n     * Return the highest priority element in the queue.\n     */\n    pop: function () {\n      return this.queue.shift();\n    },\n\n    empty: function () {\n      return this.queue.length === 0;\n    }\n  }\n};\n\n\n// node.js module exports\nif (typeof module !== 'undefined') {\n  module.exports = dijkstra;\n}\n","map":{"mappings":[{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/dijkstrajs/dijkstra.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}}],"sources":{"node_modules/dijkstrajs/dijkstra.js":"'use strict';\n\n/******************************************************************************\n * Created 2008-08-19.\n *\n * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.\n *\n * Copyright (C) 2008\n *   Wyatt Baldwin <self@wyattbaldwin.com>\n *   All rights reserved\n *\n * Licensed under the MIT license.\n *\n *   http://www.opensource.org/licenses/mit-license.php\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *****************************************************************************/\nvar dijkstra = {\n  single_source_shortest_paths: function(graph, s, d) {\n    // Predecessor map for each node that has been encountered.\n    // node ID => predecessor node ID\n    var predecessors = {};\n\n    // Costs of shortest paths from s to all nodes encountered.\n    // node ID => cost\n    var costs = {};\n    costs[s] = 0;\n\n    // Costs of shortest paths from s to all nodes encountered; differs from\n    // `costs` in that it provides easy access to the node that currently has\n    // the known shortest path from s.\n    // XXX: Do we actually need both `costs` and `open`?\n    var open = dijkstra.PriorityQueue.make();\n    open.push(s, 0);\n\n    var closest,\n        u, v,\n        cost_of_s_to_u,\n        adjacent_nodes,\n        cost_of_e,\n        cost_of_s_to_u_plus_cost_of_e,\n        cost_of_s_to_v,\n        first_visit;\n    while (!open.empty()) {\n      // In the nodes remaining in graph that have a known cost from s,\n      // find the node, u, that currently has the shortest path from s.\n      closest = open.pop();\n      u = closest.value;\n      cost_of_s_to_u = closest.cost;\n\n      // Get nodes adjacent to u...\n      adjacent_nodes = graph[u] || {};\n\n      // ...and explore the edges that connect u to those nodes, updating\n      // the cost of the shortest paths to any or all of those nodes as\n      // necessary. v is the node across the current edge from u.\n      for (v in adjacent_nodes) {\n        if (adjacent_nodes.hasOwnProperty(v)) {\n          // Get the cost of the edge running from u to v.\n          cost_of_e = adjacent_nodes[v];\n\n          // Cost of s to u plus the cost of u to v across e--this is *a*\n          // cost from s to v that may or may not be less than the current\n          // known cost to v.\n          cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;\n\n          // If we haven't visited v yet OR if the current known cost from s to\n          // v is greater than the new cost we just found (cost of s to u plus\n          // cost of u to v across e), update v's cost in the cost list and\n          // update v's predecessor in the predecessor list (it's now u).\n          cost_of_s_to_v = costs[v];\n          first_visit = (typeof costs[v] === 'undefined');\n          if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {\n            costs[v] = cost_of_s_to_u_plus_cost_of_e;\n            open.push(v, cost_of_s_to_u_plus_cost_of_e);\n            predecessors[v] = u;\n          }\n        }\n      }\n    }\n\n    if (typeof d !== 'undefined' && typeof costs[d] === 'undefined') {\n      var msg = ['Could not find a path from ', s, ' to ', d, '.'].join('');\n      throw new Error(msg);\n    }\n\n    return predecessors;\n  },\n\n  extract_shortest_path_from_predecessor_list: function(predecessors, d) {\n    var nodes = [];\n    var u = d;\n    var predecessor;\n    while (u) {\n      nodes.push(u);\n      predecessor = predecessors[u];\n      u = predecessors[u];\n    }\n    nodes.reverse();\n    return nodes;\n  },\n\n  find_path: function(graph, s, d) {\n    var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);\n    return dijkstra.extract_shortest_path_from_predecessor_list(\n      predecessors, d);\n  },\n\n  /**\n   * A very naive priority queue implementation.\n   */\n  PriorityQueue: {\n    make: function (opts) {\n      var T = dijkstra.PriorityQueue,\n          t = {},\n          key;\n      opts = opts || {};\n      for (key in T) {\n        if (T.hasOwnProperty(key)) {\n          t[key] = T[key];\n        }\n      }\n      t.queue = [];\n      t.sorter = opts.sorter || T.default_sorter;\n      return t;\n    },\n\n    default_sorter: function (a, b) {\n      return a.cost - b.cost;\n    },\n\n    /**\n     * Add a new item to the queue and ensure the highest priority element\n     * is at the front of the queue.\n     */\n    push: function (value, cost) {\n      var item = {value: value, cost: cost};\n      this.queue.push(item);\n      this.queue.sort(this.sorter);\n    },\n\n    /**\n     * Return the highest priority element in the queue.\n     */\n    pop: function () {\n      return this.queue.shift();\n    },\n\n    empty: function () {\n      return this.queue.length === 0;\n    }\n  }\n};\n\n\n// node.js module exports\nif (typeof module !== 'undefined') {\n  module.exports = dijkstra;\n}\n"},"lineCount":166}},"hash":"f5fe5cf73a2024907800886f8432a82b","cacheData":{"env":{}}}