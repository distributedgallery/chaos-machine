{"id":"node_modules/omggif/omggif.js","dependencies":[{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/omggif/package.json","includedInParent":true,"mtime":1535727512729},{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/package.json","includedInParent":true,"mtime":1535727539307},{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/.babelrc","includedInParent":true,"mtime":1533206516246}],"generated":{"js":"// (c) Dean McNamee <dean@gmail.com>, 2013.\n//\n// https://github.com/deanm/omggif\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n//\n// omggif is a JavaScript implementation of a GIF 89a encoder and decoder,\n// including animation and compression.  It does not rely on any specific\n// underlying system, so should run in the browser, Node, or Plask.\n\n\"use strict\";\n\nfunction GifWriter(buf, width, height, gopts) {\n  var p = 0;\n\n  var gopts = gopts === undefined ? { } : gopts;\n  var loop_count = gopts.loop === undefined ? null : gopts.loop;\n  var global_palette = gopts.palette === undefined ? null : gopts.palette;\n\n  if (width <= 0 || height <= 0 || width > 65535 || height > 65535)\n    throw new Error(\"Width/Height invalid.\");\n\n  function check_palette_and_num_colors(palette) {\n    var num_colors = palette.length;\n    if (num_colors < 2 || num_colors > 256 ||  num_colors & (num_colors-1)) {\n      throw new Error(\n          \"Invalid code/color length, must be power of 2 and 2 .. 256.\");\n    }\n    return num_colors;\n  }\n\n  // - Header.\n  buf[p++] = 0x47; buf[p++] = 0x49; buf[p++] = 0x46;  // GIF\n  buf[p++] = 0x38; buf[p++] = 0x39; buf[p++] = 0x61;  // 89a\n\n  // Handling of Global Color Table (palette) and background index.\n  var gp_num_colors_pow2 = 0;\n  var background = 0;\n  if (global_palette !== null) {\n    var gp_num_colors = check_palette_and_num_colors(global_palette);\n    while (gp_num_colors >>= 1) ++gp_num_colors_pow2;\n    gp_num_colors = 1 << gp_num_colors_pow2;\n    --gp_num_colors_pow2;\n    if (gopts.background !== undefined) {\n      background = gopts.background;\n      if (background >= gp_num_colors)\n        throw new Error(\"Background index out of range.\");\n      // The GIF spec states that a background index of 0 should be ignored, so\n      // this is probably a mistake and you really want to set it to another\n      // slot in the palette.  But actually in the end most browsers, etc end\n      // up ignoring this almost completely (including for dispose background).\n      if (background === 0)\n        throw new Error(\"Background index explicitly passed as 0.\");\n    }\n  }\n\n  // - Logical Screen Descriptor.\n  // NOTE(deanm): w/h apparently ignored by implementations, but set anyway.\n  buf[p++] = width & 0xff; buf[p++] = width >> 8 & 0xff;\n  buf[p++] = height & 0xff; buf[p++] = height >> 8 & 0xff;\n  // NOTE: Indicates 0-bpp original color resolution (unused?).\n  buf[p++] = (global_palette !== null ? 0x80 : 0) |  // Global Color Table Flag.\n             gp_num_colors_pow2;  // NOTE: No sort flag (unused?).\n  buf[p++] = background;  // Background Color Index.\n  buf[p++] = 0;  // Pixel aspect ratio (unused?).\n\n  // - Global Color Table\n  if (global_palette !== null) {\n    for (var i = 0, il = global_palette.length; i < il; ++i) {\n      var rgb = global_palette[i];\n      buf[p++] = rgb >> 16 & 0xff;\n      buf[p++] = rgb >> 8 & 0xff;\n      buf[p++] = rgb & 0xff;\n    }\n  }\n\n  if (loop_count !== null) {  // Netscape block for looping.\n    if (loop_count < 0 || loop_count > 65535)\n      throw new Error(\"Loop count invalid.\")\n    // Extension code, label, and length.\n    buf[p++] = 0x21; buf[p++] = 0xff; buf[p++] = 0x0b;\n    // NETSCAPE2.0\n    buf[p++] = 0x4e; buf[p++] = 0x45; buf[p++] = 0x54; buf[p++] = 0x53;\n    buf[p++] = 0x43; buf[p++] = 0x41; buf[p++] = 0x50; buf[p++] = 0x45;\n    buf[p++] = 0x32; buf[p++] = 0x2e; buf[p++] = 0x30;\n    // Sub-block\n    buf[p++] = 0x03; buf[p++] = 0x01;\n    buf[p++] = loop_count & 0xff; buf[p++] = loop_count >> 8 & 0xff;\n    buf[p++] = 0x00;  // Terminator.\n  }\n\n\n  var ended = false;\n\n  this.addFrame = function(x, y, w, h, indexed_pixels, opts) {\n    if (ended === true) { --p; ended = false; }  // Un-end.\n\n    opts = opts === undefined ? { } : opts;\n\n    // TODO(deanm): Bounds check x, y.  Do they need to be within the virtual\n    // canvas width/height, I imagine?\n    if (x < 0 || y < 0 || x > 65535 || y > 65535)\n      throw new Error(\"x/y invalid.\")\n\n    if (w <= 0 || h <= 0 || w > 65535 || h > 65535)\n      throw new Error(\"Width/Height invalid.\")\n\n    if (indexed_pixels.length < w * h)\n      throw new Error(\"Not enough pixels for the frame size.\");\n\n    var using_local_palette = true;\n    var palette = opts.palette;\n    if (palette === undefined || palette === null) {\n      using_local_palette = false;\n      palette = global_palette;\n    }\n\n    if (palette === undefined || palette === null)\n      throw new Error(\"Must supply either a local or global palette.\");\n\n    var num_colors = check_palette_and_num_colors(palette);\n\n    // Compute the min_code_size (power of 2), destroying num_colors.\n    var min_code_size = 0;\n    while (num_colors >>= 1) ++min_code_size;\n    num_colors = 1 << min_code_size;  // Now we can easily get it back.\n\n    var delay = opts.delay === undefined ? 0 : opts.delay;\n\n    // From the spec:\n    //     0 -   No disposal specified. The decoder is\n    //           not required to take any action.\n    //     1 -   Do not dispose. The graphic is to be left\n    //           in place.\n    //     2 -   Restore to background color. The area used by the\n    //           graphic must be restored to the background color.\n    //     3 -   Restore to previous. The decoder is required to\n    //           restore the area overwritten by the graphic with\n    //           what was there prior to rendering the graphic.\n    //  4-7 -    To be defined.\n    // NOTE(deanm): Dispose background doesn't really work, apparently most\n    // browsers ignore the background palette index and clear to transparency.\n    var disposal = opts.disposal === undefined ? 0 : opts.disposal;\n    if (disposal < 0 || disposal > 3)  // 4-7 is reserved.\n      throw new Error(\"Disposal out of range.\");\n\n    var use_transparency = false;\n    var transparent_index = 0;\n    if (opts.transparent !== undefined && opts.transparent !== null) {\n      use_transparency = true;\n      transparent_index = opts.transparent;\n      if (transparent_index < 0 || transparent_index >= num_colors)\n        throw new Error(\"Transparent color index.\");\n    }\n\n    if (disposal !== 0 || use_transparency || delay !== 0) {\n      // - Graphics Control Extension\n      buf[p++] = 0x21; buf[p++] = 0xf9;  // Extension / Label.\n      buf[p++] = 4;  // Byte size.\n\n      buf[p++] = disposal << 2 | (use_transparency === true ? 1 : 0);\n      buf[p++] = delay & 0xff; buf[p++] = delay >> 8 & 0xff;\n      buf[p++] = transparent_index;  // Transparent color index.\n      buf[p++] = 0;  // Block Terminator.\n    }\n\n    // - Image Descriptor\n    buf[p++] = 0x2c;  // Image Seperator.\n    buf[p++] = x & 0xff; buf[p++] = x >> 8 & 0xff;  // Left.\n    buf[p++] = y & 0xff; buf[p++] = y >> 8 & 0xff;  // Top.\n    buf[p++] = w & 0xff; buf[p++] = w >> 8 & 0xff;\n    buf[p++] = h & 0xff; buf[p++] = h >> 8 & 0xff;\n    // NOTE: No sort flag (unused?).\n    // TODO(deanm): Support interlace.\n    buf[p++] = using_local_palette === true ? (0x80 | (min_code_size-1)) : 0;\n\n    // - Local Color Table\n    if (using_local_palette === true) {\n      for (var i = 0, il = palette.length; i < il; ++i) {\n        var rgb = palette[i];\n        buf[p++] = rgb >> 16 & 0xff;\n        buf[p++] = rgb >> 8 & 0xff;\n        buf[p++] = rgb & 0xff;\n      }\n    }\n\n    p = GifWriterOutputLZWCodeStream(\n            buf, p, min_code_size < 2 ? 2 : min_code_size, indexed_pixels);\n\n    return p;\n  };\n\n  this.end = function() {\n    if (ended === false) {\n      buf[p++] = 0x3b;  // Trailer.\n      ended = true;\n    }\n    return p;\n  };\n\n  this.getOutputBuffer = function() { return buf; };\n  this.setOutputBuffer = function(v) { buf = v; };\n  this.getOutputBufferPosition = function() { return p; };\n  this.setOutputBufferPosition = function(v) { p = v; };\n}\n\n// Main compression routine, palette indexes -> LZW code stream.\n// |index_stream| must have at least one entry.\nfunction GifWriterOutputLZWCodeStream(buf, p, min_code_size, index_stream) {\n  buf[p++] = min_code_size;\n  var cur_subblock = p++;  // Pointing at the length field.\n\n  var clear_code = 1 << min_code_size;\n  var code_mask = clear_code - 1;\n  var eoi_code = clear_code + 1;\n  var next_code = eoi_code + 1;\n\n  var cur_code_size = min_code_size + 1;  // Number of bits per code.\n  var cur_shift = 0;\n  // We have at most 12-bit codes, so we should have to hold a max of 19\n  // bits here (and then we would write out).\n  var cur = 0;\n\n  function emit_bytes_to_buffer(bit_block_size) {\n    while (cur_shift >= bit_block_size) {\n      buf[p++] = cur & 0xff;\n      cur >>= 8; cur_shift -= 8;\n      if (p === cur_subblock + 256) {  // Finished a subblock.\n        buf[cur_subblock] = 255;\n        cur_subblock = p++;\n      }\n    }\n  }\n\n  function emit_code(c) {\n    cur |= c << cur_shift;\n    cur_shift += cur_code_size;\n    emit_bytes_to_buffer(8);\n  }\n\n  // I am not an expert on the topic, and I don't want to write a thesis.\n  // However, it is good to outline here the basic algorithm and the few data\n  // structures and optimizations here that make this implementation fast.\n  // The basic idea behind LZW is to build a table of previously seen runs\n  // addressed by a short id (herein called output code).  All data is\n  // referenced by a code, which represents one or more values from the\n  // original input stream.  All input bytes can be referenced as the same\n  // value as an output code.  So if you didn't want any compression, you\n  // could more or less just output the original bytes as codes (there are\n  // some details to this, but it is the idea).  In order to achieve\n  // compression, values greater then the input range (codes can be up to\n  // 12-bit while input only 8-bit) represent a sequence of previously seen\n  // inputs.  The decompressor is able to build the same mapping while\n  // decoding, so there is always a shared common knowledge between the\n  // encoding and decoder, which is also important for \"timing\" aspects like\n  // how to handle variable bit width code encoding.\n  //\n  // One obvious but very important consequence of the table system is there\n  // is always a unique id (at most 12-bits) to map the runs.  'A' might be\n  // 4, then 'AA' might be 10, 'AAA' 11, 'AAAA' 12, etc.  This relationship\n  // can be used for an effecient lookup strategy for the code mapping.  We\n  // need to know if a run has been seen before, and be able to map that run\n  // to the output code.  Since we start with known unique ids (input bytes),\n  // and then from those build more unique ids (table entries), we can\n  // continue this chain (almost like a linked list) to always have small\n  // integer values that represent the current byte chains in the encoder.\n  // This means instead of tracking the input bytes (AAAABCD) to know our\n  // current state, we can track the table entry for AAAABC (it is guaranteed\n  // to exist by the nature of the algorithm) and the next character D.\n  // Therefor the tuple of (table_entry, byte) is guaranteed to also be\n  // unique.  This allows us to create a simple lookup key for mapping input\n  // sequences to codes (table indices) without having to store or search\n  // any of the code sequences.  So if 'AAAA' has a table entry of 12, the\n  // tuple of ('AAAA', K) for any input byte K will be unique, and can be our\n  // key.  This leads to a integer value at most 20-bits, which can always\n  // fit in an SMI value and be used as a fast sparse array / object key.\n\n  // Output code for the current contents of the index buffer.\n  var ib_code = index_stream[0] & code_mask;  // Load first input index.\n  var code_table = { };  // Key'd on our 20-bit \"tuple\".\n\n  emit_code(clear_code);  // Spec says first code should be a clear code.\n\n  // First index already loaded, process the rest of the stream.\n  for (var i = 1, il = index_stream.length; i < il; ++i) {\n    var k = index_stream[i] & code_mask;\n    var cur_key = ib_code << 8 | k;  // (prev, k) unique tuple.\n    var cur_code = code_table[cur_key];  // buffer + k.\n\n    // Check if we have to create a new code table entry.\n    if (cur_code === undefined) {  // We don't have buffer + k.\n      // Emit index buffer (without k).\n      // This is an inline version of emit_code, because this is the core\n      // writing routine of the compressor (and V8 cannot inline emit_code\n      // because it is a closure here in a different context).  Additionally\n      // we can call emit_byte_to_buffer less often, because we can have\n      // 30-bits (from our 31-bit signed SMI), and we know our codes will only\n      // be 12-bits, so can safely have 18-bits there without overflow.\n      // emit_code(ib_code);\n      cur |= ib_code << cur_shift;\n      cur_shift += cur_code_size;\n      while (cur_shift >= 8) {\n        buf[p++] = cur & 0xff;\n        cur >>= 8; cur_shift -= 8;\n        if (p === cur_subblock + 256) {  // Finished a subblock.\n          buf[cur_subblock] = 255;\n          cur_subblock = p++;\n        }\n      }\n\n      if (next_code === 4096) {  // Table full, need a clear.\n        emit_code(clear_code);\n        next_code = eoi_code + 1;\n        cur_code_size = min_code_size + 1;\n        code_table = { };\n      } else {  // Table not full, insert a new entry.\n        // Increase our variable bit code sizes if necessary.  This is a bit\n        // tricky as it is based on \"timing\" between the encoding and\n        // decoder.  From the encoders perspective this should happen after\n        // we've already emitted the index buffer and are about to create the\n        // first table entry that would overflow our current code bit size.\n        if (next_code >= (1 << cur_code_size)) ++cur_code_size;\n        code_table[cur_key] = next_code++;  // Insert into code table.\n      }\n\n      ib_code = k;  // Index buffer to single input k.\n    } else {\n      ib_code = cur_code;  // Index buffer to sequence in code table.\n    }\n  }\n\n  emit_code(ib_code);  // There will still be something in the index buffer.\n  emit_code(eoi_code);  // End Of Information.\n\n  // Flush / finalize the sub-blocks stream to the buffer.\n  emit_bytes_to_buffer(1);\n\n  // Finish the sub-blocks, writing out any unfinished lengths and\n  // terminating with a sub-block of length 0.  If we have already started\n  // but not yet used a sub-block it can just become the terminator.\n  if (cur_subblock + 1 === p) {  // Started but unused.\n    buf[cur_subblock] = 0;\n  } else {  // Started and used, write length and additional terminator block.\n    buf[cur_subblock] = p - cur_subblock - 1;\n    buf[p++] = 0;\n  }\n  return p;\n}\n\nfunction GifReader(buf) {\n  var p = 0;\n\n  // - Header (GIF87a or GIF89a).\n  if (buf[p++] !== 0x47 ||            buf[p++] !== 0x49 || buf[p++] !== 0x46 ||\n      buf[p++] !== 0x38 || (buf[p++]+1 & 0xfd) !== 0x38 || buf[p++] !== 0x61) {\n    throw new Error(\"Invalid GIF 87a/89a header.\");\n  }\n\n  // - Logical Screen Descriptor.\n  var width = buf[p++] | buf[p++] << 8;\n  var height = buf[p++] | buf[p++] << 8;\n  var pf0 = buf[p++];  // <Packed Fields>.\n  var global_palette_flag = pf0 >> 7;\n  var num_global_colors_pow2 = pf0 & 0x7;\n  var num_global_colors = 1 << (num_global_colors_pow2 + 1);\n  var background = buf[p++];\n  buf[p++];  // Pixel aspect ratio (unused?).\n\n  var global_palette_offset = null;\n  var global_palette_size   = null;\n\n  if (global_palette_flag) {\n    global_palette_offset = p;\n    global_palette_size = num_global_colors;\n    p += num_global_colors * 3;  // Seek past palette.\n  }\n\n  var no_eof = true;\n\n  var frames = [ ];\n\n  var delay = 0;\n  var transparent_index = null;\n  var disposal = 0;  // 0 - No disposal specified.\n  var loop_count = null;\n\n  this.width = width;\n  this.height = height;\n\n  while (no_eof && p < buf.length) {\n    switch (buf[p++]) {\n      case 0x21:  // Graphics Control Extension Block\n        switch (buf[p++]) {\n          case 0xff:  // Application specific block\n            // Try if it's a Netscape block (with animation loop counter).\n            if (buf[p   ] !== 0x0b ||  // 21 FF already read, check block size.\n                // NETSCAPE2.0\n                buf[p+1 ] == 0x4e && buf[p+2 ] == 0x45 && buf[p+3 ] == 0x54 &&\n                buf[p+4 ] == 0x53 && buf[p+5 ] == 0x43 && buf[p+6 ] == 0x41 &&\n                buf[p+7 ] == 0x50 && buf[p+8 ] == 0x45 && buf[p+9 ] == 0x32 &&\n                buf[p+10] == 0x2e && buf[p+11] == 0x30 &&\n                // Sub-block\n                buf[p+12] == 0x03 && buf[p+13] == 0x01 && buf[p+16] == 0) {\n              p += 14;\n              loop_count = buf[p++] | buf[p++] << 8;\n              p++;  // Skip terminator.\n            } else {  // We don't know what it is, just try to get past it.\n              p += 12;\n              while (true) {  // Seek through subblocks.\n                var block_size = buf[p++];\n                // Bad block size (ex: undefined from an out of bounds read).\n                if (!(block_size >= 0)) throw Error(\"Invalid block size\");\n                if (block_size === 0) break;  // 0 size is terminator\n                p += block_size;\n              }\n            }\n            break;\n\n          case 0xf9:  // Graphics Control Extension\n            if (buf[p++] !== 0x4 || buf[p+4] !== 0)\n              throw new Error(\"Invalid graphics extension block.\");\n            var pf1 = buf[p++];\n            delay = buf[p++] | buf[p++] << 8;\n            transparent_index = buf[p++];\n            if ((pf1 & 1) === 0) transparent_index = null;\n            disposal = pf1 >> 2 & 0x7;\n            p++;  // Skip terminator.\n            break;\n\n          case 0xfe:  // Comment Extension.\n            while (true) {  // Seek through subblocks.\n              var block_size = buf[p++];\n              // Bad block size (ex: undefined from an out of bounds read).\n              if (!(block_size >= 0)) throw Error(\"Invalid block size\");\n              if (block_size === 0) break;  // 0 size is terminator\n              // console.log(buf.slice(p, p+block_size).toString('ascii'));\n              p += block_size;\n            }\n            break;\n\n          default:\n            throw new Error(\n                \"Unknown graphic control label: 0x\" + buf[p-1].toString(16));\n        }\n        break;\n\n      case 0x2c:  // Image Descriptor.\n        var x = buf[p++] | buf[p++] << 8;\n        var y = buf[p++] | buf[p++] << 8;\n        var w = buf[p++] | buf[p++] << 8;\n        var h = buf[p++] | buf[p++] << 8;\n        var pf2 = buf[p++];\n        var local_palette_flag = pf2 >> 7;\n        var interlace_flag = pf2 >> 6 & 1;\n        var num_local_colors_pow2 = pf2 & 0x7;\n        var num_local_colors = 1 << (num_local_colors_pow2 + 1);\n        var palette_offset = global_palette_offset;\n        var palette_size = global_palette_size;\n        var has_local_palette = false;\n        if (local_palette_flag) {\n          var has_local_palette = true;\n          palette_offset = p;  // Override with local palette.\n          palette_size = num_local_colors;\n          p += num_local_colors * 3;  // Seek past palette.\n        }\n\n        var data_offset = p;\n\n        p++;  // codesize\n        while (true) {\n          var block_size = buf[p++];\n          // Bad block size (ex: undefined from an out of bounds read).\n          if (!(block_size >= 0)) throw Error(\"Invalid block size\");\n          if (block_size === 0) break;  // 0 size is terminator\n          p += block_size;\n        }\n\n        frames.push({x: x, y: y, width: w, height: h,\n                     has_local_palette: has_local_palette,\n                     palette_offset: palette_offset,\n                     palette_size: palette_size,\n                     data_offset: data_offset,\n                     data_length: p - data_offset,\n                     transparent_index: transparent_index,\n                     interlaced: !!interlace_flag,\n                     delay: delay,\n                     disposal: disposal});\n        break;\n\n      case 0x3b:  // Trailer Marker (end of file).\n        no_eof = false;\n        break;\n\n      default:\n        throw new Error(\"Unknown gif block: 0x\" + buf[p-1].toString(16));\n        break;\n    }\n  }\n\n  this.numFrames = function() {\n    return frames.length;\n  };\n\n  this.loopCount = function() {\n    return loop_count;\n  };\n\n  this.frameInfo = function(frame_num) {\n    if (frame_num < 0 || frame_num >= frames.length)\n      throw new Error(\"Frame index out of range.\");\n    return frames[frame_num];\n  }\n\n  this.decodeAndBlitFrameBGRA = function(frame_num, pixels) {\n    var frame = this.frameInfo(frame_num);\n    var num_pixels = frame.width * frame.height;\n    var index_stream = new Uint8Array(num_pixels);  // At most 8-bit indices.\n    GifReaderLZWOutputIndexStream(\n        buf, frame.data_offset, index_stream, num_pixels);\n    var palette_offset = frame.palette_offset;\n\n    // NOTE(deanm): It seems to be much faster to compare index to 256 than\n    // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in\n    // the profile, not sure if it's related to using a Uint8Array.\n    var trans = frame.transparent_index;\n    if (trans === null) trans = 256;\n\n    // We are possibly just blitting to a portion of the entire frame.\n    // That is a subrect within the framerect, so the additional pixels\n    // must be skipped over after we finished a scanline.\n    var framewidth  = frame.width;\n    var framestride = width - framewidth;\n    var xleft       = framewidth;  // Number of subrect pixels left in scanline.\n\n    // Output indicies of the top left and bottom right corners of the subrect.\n    var opbeg = ((frame.y * width) + frame.x) * 4;\n    var opend = ((frame.y + frame.height) * width + frame.x) * 4;\n    var op    = opbeg;\n\n    var scanstride = framestride * 4;\n\n    // Use scanstride to skip past the rows when interlacing.  This is skipping\n    // 7 rows for the first two passes, then 3 then 1.\n    if (frame.interlaced === true) {\n      scanstride += width * 4 * 7;  // Pass 1.\n    }\n\n    var interlaceskip = 8;  // Tracking the row interval in the current pass.\n\n    for (var i = 0, il = index_stream.length; i < il; ++i) {\n      var index = index_stream[i];\n\n      if (xleft === 0) {  // Beginning of new scan line\n        op += scanstride;\n        xleft = framewidth;\n        if (op >= opend) { // Catch the wrap to switch passes when interlacing.\n          scanstride = framestride * 4 + width * 4 * (interlaceskip-1);\n          // interlaceskip / 2 * 4 is interlaceskip << 1.\n          op = opbeg + (framewidth + framestride) * (interlaceskip << 1);\n          interlaceskip >>= 1;\n        }\n      }\n\n      if (index === trans) {\n        op += 4;\n      } else {\n        var r = buf[palette_offset + index * 3];\n        var g = buf[palette_offset + index * 3 + 1];\n        var b = buf[palette_offset + index * 3 + 2];\n        pixels[op++] = b;\n        pixels[op++] = g;\n        pixels[op++] = r;\n        pixels[op++] = 255;\n      }\n      --xleft;\n    }\n  };\n\n  // I will go to copy and paste hell one day...\n  this.decodeAndBlitFrameRGBA = function(frame_num, pixels) {\n    var frame = this.frameInfo(frame_num);\n    var num_pixels = frame.width * frame.height;\n    var index_stream = new Uint8Array(num_pixels);  // At most 8-bit indices.\n    GifReaderLZWOutputIndexStream(\n        buf, frame.data_offset, index_stream, num_pixels);\n    var palette_offset = frame.palette_offset;\n\n    // NOTE(deanm): It seems to be much faster to compare index to 256 than\n    // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in\n    // the profile, not sure if it's related to using a Uint8Array.\n    var trans = frame.transparent_index;\n    if (trans === null) trans = 256;\n\n    // We are possibly just blitting to a portion of the entire frame.\n    // That is a subrect within the framerect, so the additional pixels\n    // must be skipped over after we finished a scanline.\n    var framewidth  = frame.width;\n    var framestride = width - framewidth;\n    var xleft       = framewidth;  // Number of subrect pixels left in scanline.\n\n    // Output indicies of the top left and bottom right corners of the subrect.\n    var opbeg = ((frame.y * width) + frame.x) * 4;\n    var opend = ((frame.y + frame.height) * width + frame.x) * 4;\n    var op    = opbeg;\n\n    var scanstride = framestride * 4;\n\n    // Use scanstride to skip past the rows when interlacing.  This is skipping\n    // 7 rows for the first two passes, then 3 then 1.\n    if (frame.interlaced === true) {\n      scanstride += width * 4 * 7;  // Pass 1.\n    }\n\n    var interlaceskip = 8;  // Tracking the row interval in the current pass.\n\n    for (var i = 0, il = index_stream.length; i < il; ++i) {\n      var index = index_stream[i];\n\n      if (xleft === 0) {  // Beginning of new scan line\n        op += scanstride;\n        xleft = framewidth;\n        if (op >= opend) { // Catch the wrap to switch passes when interlacing.\n          scanstride = framestride * 4 + width * 4 * (interlaceskip-1);\n          // interlaceskip / 2 * 4 is interlaceskip << 1.\n          op = opbeg + (framewidth + framestride) * (interlaceskip << 1);\n          interlaceskip >>= 1;\n        }\n      }\n\n      if (index === trans) {\n        op += 4;\n      } else {\n        var r = buf[palette_offset + index * 3];\n        var g = buf[palette_offset + index * 3 + 1];\n        var b = buf[palette_offset + index * 3 + 2];\n        pixels[op++] = r;\n        pixels[op++] = g;\n        pixels[op++] = b;\n        pixels[op++] = 255;\n      }\n      --xleft;\n    }\n  };\n}\n\nfunction GifReaderLZWOutputIndexStream(code_stream, p, output, output_length) {\n  var min_code_size = code_stream[p++];\n\n  var clear_code = 1 << min_code_size;\n  var eoi_code = clear_code + 1;\n  var next_code = eoi_code + 1;\n\n  var cur_code_size = min_code_size + 1;  // Number of bits per code.\n  // NOTE: This shares the same name as the encoder, but has a different\n  // meaning here.  Here this masks each code coming from the code stream.\n  var code_mask = (1 << cur_code_size) - 1;\n  var cur_shift = 0;\n  var cur = 0;\n\n  var op = 0;  // Output pointer.\n\n  var subblock_size = code_stream[p++];\n\n  // TODO(deanm): Would using a TypedArray be any faster?  At least it would\n  // solve the fast mode / backing store uncertainty.\n  // var code_table = Array(4096);\n  var code_table = new Int32Array(4096);  // Can be signed, we only use 20 bits.\n\n  var prev_code = null;  // Track code-1.\n\n  while (true) {\n    // Read up to two bytes, making sure we always 12-bits for max sized code.\n    while (cur_shift < 16) {\n      if (subblock_size === 0) break;  // No more data to be read.\n\n      cur |= code_stream[p++] << cur_shift;\n      cur_shift += 8;\n\n      if (subblock_size === 1) {  // Never let it get to 0 to hold logic above.\n        subblock_size = code_stream[p++];  // Next subblock.\n      } else {\n        --subblock_size;\n      }\n    }\n\n    // TODO(deanm): We should never really get here, we should have received\n    // and EOI.\n    if (cur_shift < cur_code_size)\n      break;\n\n    var code = cur & code_mask;\n    cur >>= cur_code_size;\n    cur_shift -= cur_code_size;\n\n    // TODO(deanm): Maybe should check that the first code was a clear code,\n    // at least this is what you're supposed to do.  But actually our encoder\n    // now doesn't emit a clear code first anyway.\n    if (code === clear_code) {\n      // We don't actually have to clear the table.  This could be a good idea\n      // for greater error checking, but we don't really do any anyway.  We\n      // will just track it with next_code and overwrite old entries.\n\n      next_code = eoi_code + 1;\n      cur_code_size = min_code_size + 1;\n      code_mask = (1 << cur_code_size) - 1;\n\n      // Don't update prev_code ?\n      prev_code = null;\n      continue;\n    } else if (code === eoi_code) {\n      break;\n    }\n\n    // We have a similar situation as the decoder, where we want to store\n    // variable length entries (code table entries), but we want to do in a\n    // faster manner than an array of arrays.  The code below stores sort of a\n    // linked list within the code table, and then \"chases\" through it to\n    // construct the dictionary entries.  When a new entry is created, just the\n    // last byte is stored, and the rest (prefix) of the entry is only\n    // referenced by its table entry.  Then the code chases through the\n    // prefixes until it reaches a single byte code.  We have to chase twice,\n    // first to compute the length, and then to actually copy the data to the\n    // output (backwards, since we know the length).  The alternative would be\n    // storing something in an intermediate stack, but that doesn't make any\n    // more sense.  I implemented an approach where it also stored the length\n    // in the code table, although it's a bit tricky because you run out of\n    // bits (12 + 12 + 8), but I didn't measure much improvements (the table\n    // entries are generally not the long).  Even when I created benchmarks for\n    // very long table entries the complexity did not seem worth it.\n    // The code table stores the prefix entry in 12 bits and then the suffix\n    // byte in 8 bits, so each entry is 20 bits.\n\n    var chase_code = code < next_code ? code : prev_code;\n\n    // Chase what we will output, either {CODE} or {CODE-1}.\n    var chase_length = 0;\n    var chase = chase_code;\n    while (chase > clear_code) {\n      chase = code_table[chase] >> 8;\n      ++chase_length;\n    }\n\n    var k = chase;\n\n    var op_end = op + chase_length + (chase_code !== code ? 1 : 0);\n    if (op_end > output_length) {\n      console.log(\"Warning, gif stream longer than expected.\");\n      return;\n    }\n\n    // Already have the first byte from the chase, might as well write it fast.\n    output[op++] = k;\n\n    op += chase_length;\n    var b = op;  // Track pointer, writing backwards.\n\n    if (chase_code !== code)  // The case of emitting {CODE-1} + k.\n      output[op++] = k;\n\n    chase = chase_code;\n    while (chase_length--) {\n      chase = code_table[chase];\n      output[--b] = chase & 0xff;  // Write backwards.\n      chase >>= 8;  // Pull down to the prefix code.\n    }\n\n    if (prev_code !== null && next_code < 4096) {\n      code_table[next_code++] = prev_code << 8 | k;\n      // TODO(deanm): Figure out this clearing vs code growth logic better.  I\n      // have an feeling that it should just happen somewhere else, for now it\n      // is awkward between when we grow past the max and then hit a clear code.\n      // For now just check if we hit the max 12-bits (then a clear code should\n      // follow, also of course encoded in 12-bits).\n      if (next_code >= code_mask+1 && cur_code_size < 12) {\n        ++cur_code_size;\n        code_mask = code_mask << 1 | 1;\n      }\n    }\n\n    prev_code = code;\n  }\n\n  if (op !== output_length) {\n    console.log(\"Warning, gif stream shorter than expected.\");\n  }\n\n  return output;\n}\n\n// CommonJS.\ntry { exports.GifWriter = GifWriter; exports.GifReader = GifReader } catch(e) {}\n","map":{"mappings":[{"source":"node_modules/omggif/omggif.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":802,"column":0},"generated":{"line":802,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":803,"column":0},"generated":{"line":803,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":804,"column":0},"generated":{"line":804,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":805,"column":0},"generated":{"line":805,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":806,"column":0},"generated":{"line":806,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":807,"column":0},"generated":{"line":807,"column":0}},{"source":"node_modules/omggif/omggif.js","original":{"line":808,"column":0},"generated":{"line":808,"column":0}}],"sources":{"node_modules/omggif/omggif.js":"// (c) Dean McNamee <dean@gmail.com>, 2013.\n//\n// https://github.com/deanm/omggif\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n//\n// omggif is a JavaScript implementation of a GIF 89a encoder and decoder,\n// including animation and compression.  It does not rely on any specific\n// underlying system, so should run in the browser, Node, or Plask.\n\n\"use strict\";\n\nfunction GifWriter(buf, width, height, gopts) {\n  var p = 0;\n\n  var gopts = gopts === undefined ? { } : gopts;\n  var loop_count = gopts.loop === undefined ? null : gopts.loop;\n  var global_palette = gopts.palette === undefined ? null : gopts.palette;\n\n  if (width <= 0 || height <= 0 || width > 65535 || height > 65535)\n    throw new Error(\"Width/Height invalid.\");\n\n  function check_palette_and_num_colors(palette) {\n    var num_colors = palette.length;\n    if (num_colors < 2 || num_colors > 256 ||  num_colors & (num_colors-1)) {\n      throw new Error(\n          \"Invalid code/color length, must be power of 2 and 2 .. 256.\");\n    }\n    return num_colors;\n  }\n\n  // - Header.\n  buf[p++] = 0x47; buf[p++] = 0x49; buf[p++] = 0x46;  // GIF\n  buf[p++] = 0x38; buf[p++] = 0x39; buf[p++] = 0x61;  // 89a\n\n  // Handling of Global Color Table (palette) and background index.\n  var gp_num_colors_pow2 = 0;\n  var background = 0;\n  if (global_palette !== null) {\n    var gp_num_colors = check_palette_and_num_colors(global_palette);\n    while (gp_num_colors >>= 1) ++gp_num_colors_pow2;\n    gp_num_colors = 1 << gp_num_colors_pow2;\n    --gp_num_colors_pow2;\n    if (gopts.background !== undefined) {\n      background = gopts.background;\n      if (background >= gp_num_colors)\n        throw new Error(\"Background index out of range.\");\n      // The GIF spec states that a background index of 0 should be ignored, so\n      // this is probably a mistake and you really want to set it to another\n      // slot in the palette.  But actually in the end most browsers, etc end\n      // up ignoring this almost completely (including for dispose background).\n      if (background === 0)\n        throw new Error(\"Background index explicitly passed as 0.\");\n    }\n  }\n\n  // - Logical Screen Descriptor.\n  // NOTE(deanm): w/h apparently ignored by implementations, but set anyway.\n  buf[p++] = width & 0xff; buf[p++] = width >> 8 & 0xff;\n  buf[p++] = height & 0xff; buf[p++] = height >> 8 & 0xff;\n  // NOTE: Indicates 0-bpp original color resolution (unused?).\n  buf[p++] = (global_palette !== null ? 0x80 : 0) |  // Global Color Table Flag.\n             gp_num_colors_pow2;  // NOTE: No sort flag (unused?).\n  buf[p++] = background;  // Background Color Index.\n  buf[p++] = 0;  // Pixel aspect ratio (unused?).\n\n  // - Global Color Table\n  if (global_palette !== null) {\n    for (var i = 0, il = global_palette.length; i < il; ++i) {\n      var rgb = global_palette[i];\n      buf[p++] = rgb >> 16 & 0xff;\n      buf[p++] = rgb >> 8 & 0xff;\n      buf[p++] = rgb & 0xff;\n    }\n  }\n\n  if (loop_count !== null) {  // Netscape block for looping.\n    if (loop_count < 0 || loop_count > 65535)\n      throw new Error(\"Loop count invalid.\")\n    // Extension code, label, and length.\n    buf[p++] = 0x21; buf[p++] = 0xff; buf[p++] = 0x0b;\n    // NETSCAPE2.0\n    buf[p++] = 0x4e; buf[p++] = 0x45; buf[p++] = 0x54; buf[p++] = 0x53;\n    buf[p++] = 0x43; buf[p++] = 0x41; buf[p++] = 0x50; buf[p++] = 0x45;\n    buf[p++] = 0x32; buf[p++] = 0x2e; buf[p++] = 0x30;\n    // Sub-block\n    buf[p++] = 0x03; buf[p++] = 0x01;\n    buf[p++] = loop_count & 0xff; buf[p++] = loop_count >> 8 & 0xff;\n    buf[p++] = 0x00;  // Terminator.\n  }\n\n\n  var ended = false;\n\n  this.addFrame = function(x, y, w, h, indexed_pixels, opts) {\n    if (ended === true) { --p; ended = false; }  // Un-end.\n\n    opts = opts === undefined ? { } : opts;\n\n    // TODO(deanm): Bounds check x, y.  Do they need to be within the virtual\n    // canvas width/height, I imagine?\n    if (x < 0 || y < 0 || x > 65535 || y > 65535)\n      throw new Error(\"x/y invalid.\")\n\n    if (w <= 0 || h <= 0 || w > 65535 || h > 65535)\n      throw new Error(\"Width/Height invalid.\")\n\n    if (indexed_pixels.length < w * h)\n      throw new Error(\"Not enough pixels for the frame size.\");\n\n    var using_local_palette = true;\n    var palette = opts.palette;\n    if (palette === undefined || palette === null) {\n      using_local_palette = false;\n      palette = global_palette;\n    }\n\n    if (palette === undefined || palette === null)\n      throw new Error(\"Must supply either a local or global palette.\");\n\n    var num_colors = check_palette_and_num_colors(palette);\n\n    // Compute the min_code_size (power of 2), destroying num_colors.\n    var min_code_size = 0;\n    while (num_colors >>= 1) ++min_code_size;\n    num_colors = 1 << min_code_size;  // Now we can easily get it back.\n\n    var delay = opts.delay === undefined ? 0 : opts.delay;\n\n    // From the spec:\n    //     0 -   No disposal specified. The decoder is\n    //           not required to take any action.\n    //     1 -   Do not dispose. The graphic is to be left\n    //           in place.\n    //     2 -   Restore to background color. The area used by the\n    //           graphic must be restored to the background color.\n    //     3 -   Restore to previous. The decoder is required to\n    //           restore the area overwritten by the graphic with\n    //           what was there prior to rendering the graphic.\n    //  4-7 -    To be defined.\n    // NOTE(deanm): Dispose background doesn't really work, apparently most\n    // browsers ignore the background palette index and clear to transparency.\n    var disposal = opts.disposal === undefined ? 0 : opts.disposal;\n    if (disposal < 0 || disposal > 3)  // 4-7 is reserved.\n      throw new Error(\"Disposal out of range.\");\n\n    var use_transparency = false;\n    var transparent_index = 0;\n    if (opts.transparent !== undefined && opts.transparent !== null) {\n      use_transparency = true;\n      transparent_index = opts.transparent;\n      if (transparent_index < 0 || transparent_index >= num_colors)\n        throw new Error(\"Transparent color index.\");\n    }\n\n    if (disposal !== 0 || use_transparency || delay !== 0) {\n      // - Graphics Control Extension\n      buf[p++] = 0x21; buf[p++] = 0xf9;  // Extension / Label.\n      buf[p++] = 4;  // Byte size.\n\n      buf[p++] = disposal << 2 | (use_transparency === true ? 1 : 0);\n      buf[p++] = delay & 0xff; buf[p++] = delay >> 8 & 0xff;\n      buf[p++] = transparent_index;  // Transparent color index.\n      buf[p++] = 0;  // Block Terminator.\n    }\n\n    // - Image Descriptor\n    buf[p++] = 0x2c;  // Image Seperator.\n    buf[p++] = x & 0xff; buf[p++] = x >> 8 & 0xff;  // Left.\n    buf[p++] = y & 0xff; buf[p++] = y >> 8 & 0xff;  // Top.\n    buf[p++] = w & 0xff; buf[p++] = w >> 8 & 0xff;\n    buf[p++] = h & 0xff; buf[p++] = h >> 8 & 0xff;\n    // NOTE: No sort flag (unused?).\n    // TODO(deanm): Support interlace.\n    buf[p++] = using_local_palette === true ? (0x80 | (min_code_size-1)) : 0;\n\n    // - Local Color Table\n    if (using_local_palette === true) {\n      for (var i = 0, il = palette.length; i < il; ++i) {\n        var rgb = palette[i];\n        buf[p++] = rgb >> 16 & 0xff;\n        buf[p++] = rgb >> 8 & 0xff;\n        buf[p++] = rgb & 0xff;\n      }\n    }\n\n    p = GifWriterOutputLZWCodeStream(\n            buf, p, min_code_size < 2 ? 2 : min_code_size, indexed_pixels);\n\n    return p;\n  };\n\n  this.end = function() {\n    if (ended === false) {\n      buf[p++] = 0x3b;  // Trailer.\n      ended = true;\n    }\n    return p;\n  };\n\n  this.getOutputBuffer = function() { return buf; };\n  this.setOutputBuffer = function(v) { buf = v; };\n  this.getOutputBufferPosition = function() { return p; };\n  this.setOutputBufferPosition = function(v) { p = v; };\n}\n\n// Main compression routine, palette indexes -> LZW code stream.\n// |index_stream| must have at least one entry.\nfunction GifWriterOutputLZWCodeStream(buf, p, min_code_size, index_stream) {\n  buf[p++] = min_code_size;\n  var cur_subblock = p++;  // Pointing at the length field.\n\n  var clear_code = 1 << min_code_size;\n  var code_mask = clear_code - 1;\n  var eoi_code = clear_code + 1;\n  var next_code = eoi_code + 1;\n\n  var cur_code_size = min_code_size + 1;  // Number of bits per code.\n  var cur_shift = 0;\n  // We have at most 12-bit codes, so we should have to hold a max of 19\n  // bits here (and then we would write out).\n  var cur = 0;\n\n  function emit_bytes_to_buffer(bit_block_size) {\n    while (cur_shift >= bit_block_size) {\n      buf[p++] = cur & 0xff;\n      cur >>= 8; cur_shift -= 8;\n      if (p === cur_subblock + 256) {  // Finished a subblock.\n        buf[cur_subblock] = 255;\n        cur_subblock = p++;\n      }\n    }\n  }\n\n  function emit_code(c) {\n    cur |= c << cur_shift;\n    cur_shift += cur_code_size;\n    emit_bytes_to_buffer(8);\n  }\n\n  // I am not an expert on the topic, and I don't want to write a thesis.\n  // However, it is good to outline here the basic algorithm and the few data\n  // structures and optimizations here that make this implementation fast.\n  // The basic idea behind LZW is to build a table of previously seen runs\n  // addressed by a short id (herein called output code).  All data is\n  // referenced by a code, which represents one or more values from the\n  // original input stream.  All input bytes can be referenced as the same\n  // value as an output code.  So if you didn't want any compression, you\n  // could more or less just output the original bytes as codes (there are\n  // some details to this, but it is the idea).  In order to achieve\n  // compression, values greater then the input range (codes can be up to\n  // 12-bit while input only 8-bit) represent a sequence of previously seen\n  // inputs.  The decompressor is able to build the same mapping while\n  // decoding, so there is always a shared common knowledge between the\n  // encoding and decoder, which is also important for \"timing\" aspects like\n  // how to handle variable bit width code encoding.\n  //\n  // One obvious but very important consequence of the table system is there\n  // is always a unique id (at most 12-bits) to map the runs.  'A' might be\n  // 4, then 'AA' might be 10, 'AAA' 11, 'AAAA' 12, etc.  This relationship\n  // can be used for an effecient lookup strategy for the code mapping.  We\n  // need to know if a run has been seen before, and be able to map that run\n  // to the output code.  Since we start with known unique ids (input bytes),\n  // and then from those build more unique ids (table entries), we can\n  // continue this chain (almost like a linked list) to always have small\n  // integer values that represent the current byte chains in the encoder.\n  // This means instead of tracking the input bytes (AAAABCD) to know our\n  // current state, we can track the table entry for AAAABC (it is guaranteed\n  // to exist by the nature of the algorithm) and the next character D.\n  // Therefor the tuple of (table_entry, byte) is guaranteed to also be\n  // unique.  This allows us to create a simple lookup key for mapping input\n  // sequences to codes (table indices) without having to store or search\n  // any of the code sequences.  So if 'AAAA' has a table entry of 12, the\n  // tuple of ('AAAA', K) for any input byte K will be unique, and can be our\n  // key.  This leads to a integer value at most 20-bits, which can always\n  // fit in an SMI value and be used as a fast sparse array / object key.\n\n  // Output code for the current contents of the index buffer.\n  var ib_code = index_stream[0] & code_mask;  // Load first input index.\n  var code_table = { };  // Key'd on our 20-bit \"tuple\".\n\n  emit_code(clear_code);  // Spec says first code should be a clear code.\n\n  // First index already loaded, process the rest of the stream.\n  for (var i = 1, il = index_stream.length; i < il; ++i) {\n    var k = index_stream[i] & code_mask;\n    var cur_key = ib_code << 8 | k;  // (prev, k) unique tuple.\n    var cur_code = code_table[cur_key];  // buffer + k.\n\n    // Check if we have to create a new code table entry.\n    if (cur_code === undefined) {  // We don't have buffer + k.\n      // Emit index buffer (without k).\n      // This is an inline version of emit_code, because this is the core\n      // writing routine of the compressor (and V8 cannot inline emit_code\n      // because it is a closure here in a different context).  Additionally\n      // we can call emit_byte_to_buffer less often, because we can have\n      // 30-bits (from our 31-bit signed SMI), and we know our codes will only\n      // be 12-bits, so can safely have 18-bits there without overflow.\n      // emit_code(ib_code);\n      cur |= ib_code << cur_shift;\n      cur_shift += cur_code_size;\n      while (cur_shift >= 8) {\n        buf[p++] = cur & 0xff;\n        cur >>= 8; cur_shift -= 8;\n        if (p === cur_subblock + 256) {  // Finished a subblock.\n          buf[cur_subblock] = 255;\n          cur_subblock = p++;\n        }\n      }\n\n      if (next_code === 4096) {  // Table full, need a clear.\n        emit_code(clear_code);\n        next_code = eoi_code + 1;\n        cur_code_size = min_code_size + 1;\n        code_table = { };\n      } else {  // Table not full, insert a new entry.\n        // Increase our variable bit code sizes if necessary.  This is a bit\n        // tricky as it is based on \"timing\" between the encoding and\n        // decoder.  From the encoders perspective this should happen after\n        // we've already emitted the index buffer and are about to create the\n        // first table entry that would overflow our current code bit size.\n        if (next_code >= (1 << cur_code_size)) ++cur_code_size;\n        code_table[cur_key] = next_code++;  // Insert into code table.\n      }\n\n      ib_code = k;  // Index buffer to single input k.\n    } else {\n      ib_code = cur_code;  // Index buffer to sequence in code table.\n    }\n  }\n\n  emit_code(ib_code);  // There will still be something in the index buffer.\n  emit_code(eoi_code);  // End Of Information.\n\n  // Flush / finalize the sub-blocks stream to the buffer.\n  emit_bytes_to_buffer(1);\n\n  // Finish the sub-blocks, writing out any unfinished lengths and\n  // terminating with a sub-block of length 0.  If we have already started\n  // but not yet used a sub-block it can just become the terminator.\n  if (cur_subblock + 1 === p) {  // Started but unused.\n    buf[cur_subblock] = 0;\n  } else {  // Started and used, write length and additional terminator block.\n    buf[cur_subblock] = p - cur_subblock - 1;\n    buf[p++] = 0;\n  }\n  return p;\n}\n\nfunction GifReader(buf) {\n  var p = 0;\n\n  // - Header (GIF87a or GIF89a).\n  if (buf[p++] !== 0x47 ||            buf[p++] !== 0x49 || buf[p++] !== 0x46 ||\n      buf[p++] !== 0x38 || (buf[p++]+1 & 0xfd) !== 0x38 || buf[p++] !== 0x61) {\n    throw new Error(\"Invalid GIF 87a/89a header.\");\n  }\n\n  // - Logical Screen Descriptor.\n  var width = buf[p++] | buf[p++] << 8;\n  var height = buf[p++] | buf[p++] << 8;\n  var pf0 = buf[p++];  // <Packed Fields>.\n  var global_palette_flag = pf0 >> 7;\n  var num_global_colors_pow2 = pf0 & 0x7;\n  var num_global_colors = 1 << (num_global_colors_pow2 + 1);\n  var background = buf[p++];\n  buf[p++];  // Pixel aspect ratio (unused?).\n\n  var global_palette_offset = null;\n  var global_palette_size   = null;\n\n  if (global_palette_flag) {\n    global_palette_offset = p;\n    global_palette_size = num_global_colors;\n    p += num_global_colors * 3;  // Seek past palette.\n  }\n\n  var no_eof = true;\n\n  var frames = [ ];\n\n  var delay = 0;\n  var transparent_index = null;\n  var disposal = 0;  // 0 - No disposal specified.\n  var loop_count = null;\n\n  this.width = width;\n  this.height = height;\n\n  while (no_eof && p < buf.length) {\n    switch (buf[p++]) {\n      case 0x21:  // Graphics Control Extension Block\n        switch (buf[p++]) {\n          case 0xff:  // Application specific block\n            // Try if it's a Netscape block (with animation loop counter).\n            if (buf[p   ] !== 0x0b ||  // 21 FF already read, check block size.\n                // NETSCAPE2.0\n                buf[p+1 ] == 0x4e && buf[p+2 ] == 0x45 && buf[p+3 ] == 0x54 &&\n                buf[p+4 ] == 0x53 && buf[p+5 ] == 0x43 && buf[p+6 ] == 0x41 &&\n                buf[p+7 ] == 0x50 && buf[p+8 ] == 0x45 && buf[p+9 ] == 0x32 &&\n                buf[p+10] == 0x2e && buf[p+11] == 0x30 &&\n                // Sub-block\n                buf[p+12] == 0x03 && buf[p+13] == 0x01 && buf[p+16] == 0) {\n              p += 14;\n              loop_count = buf[p++] | buf[p++] << 8;\n              p++;  // Skip terminator.\n            } else {  // We don't know what it is, just try to get past it.\n              p += 12;\n              while (true) {  // Seek through subblocks.\n                var block_size = buf[p++];\n                // Bad block size (ex: undefined from an out of bounds read).\n                if (!(block_size >= 0)) throw Error(\"Invalid block size\");\n                if (block_size === 0) break;  // 0 size is terminator\n                p += block_size;\n              }\n            }\n            break;\n\n          case 0xf9:  // Graphics Control Extension\n            if (buf[p++] !== 0x4 || buf[p+4] !== 0)\n              throw new Error(\"Invalid graphics extension block.\");\n            var pf1 = buf[p++];\n            delay = buf[p++] | buf[p++] << 8;\n            transparent_index = buf[p++];\n            if ((pf1 & 1) === 0) transparent_index = null;\n            disposal = pf1 >> 2 & 0x7;\n            p++;  // Skip terminator.\n            break;\n\n          case 0xfe:  // Comment Extension.\n            while (true) {  // Seek through subblocks.\n              var block_size = buf[p++];\n              // Bad block size (ex: undefined from an out of bounds read).\n              if (!(block_size >= 0)) throw Error(\"Invalid block size\");\n              if (block_size === 0) break;  // 0 size is terminator\n              // console.log(buf.slice(p, p+block_size).toString('ascii'));\n              p += block_size;\n            }\n            break;\n\n          default:\n            throw new Error(\n                \"Unknown graphic control label: 0x\" + buf[p-1].toString(16));\n        }\n        break;\n\n      case 0x2c:  // Image Descriptor.\n        var x = buf[p++] | buf[p++] << 8;\n        var y = buf[p++] | buf[p++] << 8;\n        var w = buf[p++] | buf[p++] << 8;\n        var h = buf[p++] | buf[p++] << 8;\n        var pf2 = buf[p++];\n        var local_palette_flag = pf2 >> 7;\n        var interlace_flag = pf2 >> 6 & 1;\n        var num_local_colors_pow2 = pf2 & 0x7;\n        var num_local_colors = 1 << (num_local_colors_pow2 + 1);\n        var palette_offset = global_palette_offset;\n        var palette_size = global_palette_size;\n        var has_local_palette = false;\n        if (local_palette_flag) {\n          var has_local_palette = true;\n          palette_offset = p;  // Override with local palette.\n          palette_size = num_local_colors;\n          p += num_local_colors * 3;  // Seek past palette.\n        }\n\n        var data_offset = p;\n\n        p++;  // codesize\n        while (true) {\n          var block_size = buf[p++];\n          // Bad block size (ex: undefined from an out of bounds read).\n          if (!(block_size >= 0)) throw Error(\"Invalid block size\");\n          if (block_size === 0) break;  // 0 size is terminator\n          p += block_size;\n        }\n\n        frames.push({x: x, y: y, width: w, height: h,\n                     has_local_palette: has_local_palette,\n                     palette_offset: palette_offset,\n                     palette_size: palette_size,\n                     data_offset: data_offset,\n                     data_length: p - data_offset,\n                     transparent_index: transparent_index,\n                     interlaced: !!interlace_flag,\n                     delay: delay,\n                     disposal: disposal});\n        break;\n\n      case 0x3b:  // Trailer Marker (end of file).\n        no_eof = false;\n        break;\n\n      default:\n        throw new Error(\"Unknown gif block: 0x\" + buf[p-1].toString(16));\n        break;\n    }\n  }\n\n  this.numFrames = function() {\n    return frames.length;\n  };\n\n  this.loopCount = function() {\n    return loop_count;\n  };\n\n  this.frameInfo = function(frame_num) {\n    if (frame_num < 0 || frame_num >= frames.length)\n      throw new Error(\"Frame index out of range.\");\n    return frames[frame_num];\n  }\n\n  this.decodeAndBlitFrameBGRA = function(frame_num, pixels) {\n    var frame = this.frameInfo(frame_num);\n    var num_pixels = frame.width * frame.height;\n    var index_stream = new Uint8Array(num_pixels);  // At most 8-bit indices.\n    GifReaderLZWOutputIndexStream(\n        buf, frame.data_offset, index_stream, num_pixels);\n    var palette_offset = frame.palette_offset;\n\n    // NOTE(deanm): It seems to be much faster to compare index to 256 than\n    // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in\n    // the profile, not sure if it's related to using a Uint8Array.\n    var trans = frame.transparent_index;\n    if (trans === null) trans = 256;\n\n    // We are possibly just blitting to a portion of the entire frame.\n    // That is a subrect within the framerect, so the additional pixels\n    // must be skipped over after we finished a scanline.\n    var framewidth  = frame.width;\n    var framestride = width - framewidth;\n    var xleft       = framewidth;  // Number of subrect pixels left in scanline.\n\n    // Output indicies of the top left and bottom right corners of the subrect.\n    var opbeg = ((frame.y * width) + frame.x) * 4;\n    var opend = ((frame.y + frame.height) * width + frame.x) * 4;\n    var op    = opbeg;\n\n    var scanstride = framestride * 4;\n\n    // Use scanstride to skip past the rows when interlacing.  This is skipping\n    // 7 rows for the first two passes, then 3 then 1.\n    if (frame.interlaced === true) {\n      scanstride += width * 4 * 7;  // Pass 1.\n    }\n\n    var interlaceskip = 8;  // Tracking the row interval in the current pass.\n\n    for (var i = 0, il = index_stream.length; i < il; ++i) {\n      var index = index_stream[i];\n\n      if (xleft === 0) {  // Beginning of new scan line\n        op += scanstride;\n        xleft = framewidth;\n        if (op >= opend) { // Catch the wrap to switch passes when interlacing.\n          scanstride = framestride * 4 + width * 4 * (interlaceskip-1);\n          // interlaceskip / 2 * 4 is interlaceskip << 1.\n          op = opbeg + (framewidth + framestride) * (interlaceskip << 1);\n          interlaceskip >>= 1;\n        }\n      }\n\n      if (index === trans) {\n        op += 4;\n      } else {\n        var r = buf[palette_offset + index * 3];\n        var g = buf[palette_offset + index * 3 + 1];\n        var b = buf[palette_offset + index * 3 + 2];\n        pixels[op++] = b;\n        pixels[op++] = g;\n        pixels[op++] = r;\n        pixels[op++] = 255;\n      }\n      --xleft;\n    }\n  };\n\n  // I will go to copy and paste hell one day...\n  this.decodeAndBlitFrameRGBA = function(frame_num, pixels) {\n    var frame = this.frameInfo(frame_num);\n    var num_pixels = frame.width * frame.height;\n    var index_stream = new Uint8Array(num_pixels);  // At most 8-bit indices.\n    GifReaderLZWOutputIndexStream(\n        buf, frame.data_offset, index_stream, num_pixels);\n    var palette_offset = frame.palette_offset;\n\n    // NOTE(deanm): It seems to be much faster to compare index to 256 than\n    // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in\n    // the profile, not sure if it's related to using a Uint8Array.\n    var trans = frame.transparent_index;\n    if (trans === null) trans = 256;\n\n    // We are possibly just blitting to a portion of the entire frame.\n    // That is a subrect within the framerect, so the additional pixels\n    // must be skipped over after we finished a scanline.\n    var framewidth  = frame.width;\n    var framestride = width - framewidth;\n    var xleft       = framewidth;  // Number of subrect pixels left in scanline.\n\n    // Output indicies of the top left and bottom right corners of the subrect.\n    var opbeg = ((frame.y * width) + frame.x) * 4;\n    var opend = ((frame.y + frame.height) * width + frame.x) * 4;\n    var op    = opbeg;\n\n    var scanstride = framestride * 4;\n\n    // Use scanstride to skip past the rows when interlacing.  This is skipping\n    // 7 rows for the first two passes, then 3 then 1.\n    if (frame.interlaced === true) {\n      scanstride += width * 4 * 7;  // Pass 1.\n    }\n\n    var interlaceskip = 8;  // Tracking the row interval in the current pass.\n\n    for (var i = 0, il = index_stream.length; i < il; ++i) {\n      var index = index_stream[i];\n\n      if (xleft === 0) {  // Beginning of new scan line\n        op += scanstride;\n        xleft = framewidth;\n        if (op >= opend) { // Catch the wrap to switch passes when interlacing.\n          scanstride = framestride * 4 + width * 4 * (interlaceskip-1);\n          // interlaceskip / 2 * 4 is interlaceskip << 1.\n          op = opbeg + (framewidth + framestride) * (interlaceskip << 1);\n          interlaceskip >>= 1;\n        }\n      }\n\n      if (index === trans) {\n        op += 4;\n      } else {\n        var r = buf[palette_offset + index * 3];\n        var g = buf[palette_offset + index * 3 + 1];\n        var b = buf[palette_offset + index * 3 + 2];\n        pixels[op++] = r;\n        pixels[op++] = g;\n        pixels[op++] = b;\n        pixels[op++] = 255;\n      }\n      --xleft;\n    }\n  };\n}\n\nfunction GifReaderLZWOutputIndexStream(code_stream, p, output, output_length) {\n  var min_code_size = code_stream[p++];\n\n  var clear_code = 1 << min_code_size;\n  var eoi_code = clear_code + 1;\n  var next_code = eoi_code + 1;\n\n  var cur_code_size = min_code_size + 1;  // Number of bits per code.\n  // NOTE: This shares the same name as the encoder, but has a different\n  // meaning here.  Here this masks each code coming from the code stream.\n  var code_mask = (1 << cur_code_size) - 1;\n  var cur_shift = 0;\n  var cur = 0;\n\n  var op = 0;  // Output pointer.\n\n  var subblock_size = code_stream[p++];\n\n  // TODO(deanm): Would using a TypedArray be any faster?  At least it would\n  // solve the fast mode / backing store uncertainty.\n  // var code_table = Array(4096);\n  var code_table = new Int32Array(4096);  // Can be signed, we only use 20 bits.\n\n  var prev_code = null;  // Track code-1.\n\n  while (true) {\n    // Read up to two bytes, making sure we always 12-bits for max sized code.\n    while (cur_shift < 16) {\n      if (subblock_size === 0) break;  // No more data to be read.\n\n      cur |= code_stream[p++] << cur_shift;\n      cur_shift += 8;\n\n      if (subblock_size === 1) {  // Never let it get to 0 to hold logic above.\n        subblock_size = code_stream[p++];  // Next subblock.\n      } else {\n        --subblock_size;\n      }\n    }\n\n    // TODO(deanm): We should never really get here, we should have received\n    // and EOI.\n    if (cur_shift < cur_code_size)\n      break;\n\n    var code = cur & code_mask;\n    cur >>= cur_code_size;\n    cur_shift -= cur_code_size;\n\n    // TODO(deanm): Maybe should check that the first code was a clear code,\n    // at least this is what you're supposed to do.  But actually our encoder\n    // now doesn't emit a clear code first anyway.\n    if (code === clear_code) {\n      // We don't actually have to clear the table.  This could be a good idea\n      // for greater error checking, but we don't really do any anyway.  We\n      // will just track it with next_code and overwrite old entries.\n\n      next_code = eoi_code + 1;\n      cur_code_size = min_code_size + 1;\n      code_mask = (1 << cur_code_size) - 1;\n\n      // Don't update prev_code ?\n      prev_code = null;\n      continue;\n    } else if (code === eoi_code) {\n      break;\n    }\n\n    // We have a similar situation as the decoder, where we want to store\n    // variable length entries (code table entries), but we want to do in a\n    // faster manner than an array of arrays.  The code below stores sort of a\n    // linked list within the code table, and then \"chases\" through it to\n    // construct the dictionary entries.  When a new entry is created, just the\n    // last byte is stored, and the rest (prefix) of the entry is only\n    // referenced by its table entry.  Then the code chases through the\n    // prefixes until it reaches a single byte code.  We have to chase twice,\n    // first to compute the length, and then to actually copy the data to the\n    // output (backwards, since we know the length).  The alternative would be\n    // storing something in an intermediate stack, but that doesn't make any\n    // more sense.  I implemented an approach where it also stored the length\n    // in the code table, although it's a bit tricky because you run out of\n    // bits (12 + 12 + 8), but I didn't measure much improvements (the table\n    // entries are generally not the long).  Even when I created benchmarks for\n    // very long table entries the complexity did not seem worth it.\n    // The code table stores the prefix entry in 12 bits and then the suffix\n    // byte in 8 bits, so each entry is 20 bits.\n\n    var chase_code = code < next_code ? code : prev_code;\n\n    // Chase what we will output, either {CODE} or {CODE-1}.\n    var chase_length = 0;\n    var chase = chase_code;\n    while (chase > clear_code) {\n      chase = code_table[chase] >> 8;\n      ++chase_length;\n    }\n\n    var k = chase;\n\n    var op_end = op + chase_length + (chase_code !== code ? 1 : 0);\n    if (op_end > output_length) {\n      console.log(\"Warning, gif stream longer than expected.\");\n      return;\n    }\n\n    // Already have the first byte from the chase, might as well write it fast.\n    output[op++] = k;\n\n    op += chase_length;\n    var b = op;  // Track pointer, writing backwards.\n\n    if (chase_code !== code)  // The case of emitting {CODE-1} + k.\n      output[op++] = k;\n\n    chase = chase_code;\n    while (chase_length--) {\n      chase = code_table[chase];\n      output[--b] = chase & 0xff;  // Write backwards.\n      chase >>= 8;  // Pull down to the prefix code.\n    }\n\n    if (prev_code !== null && next_code < 4096) {\n      code_table[next_code++] = prev_code << 8 | k;\n      // TODO(deanm): Figure out this clearing vs code growth logic better.  I\n      // have an feeling that it should just happen somewhere else, for now it\n      // is awkward between when we grow past the max and then hit a clear code.\n      // For now just check if we hit the max 12-bits (then a clear code should\n      // follow, also of course encoded in 12-bits).\n      if (next_code >= code_mask+1 && cur_code_size < 12) {\n        ++cur_code_size;\n        code_mask = code_mask << 1 | 1;\n      }\n    }\n\n    prev_code = code;\n  }\n\n  if (op !== output_length) {\n    console.log(\"Warning, gif stream shorter than expected.\");\n  }\n\n  return output;\n}\n\n// CommonJS.\ntry { exports.GifWriter = GifWriter; exports.GifReader = GifReader } catch(e) {}\n"},"lineCount":808}},"hash":"22968e3fdd83c11b0b8b354e02907a73","cacheData":{"env":{}}}