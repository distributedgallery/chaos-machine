{"id":"node_modules/@serialport/parser-byte-length/byte-length.js","dependencies":[{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/@serialport/parser-byte-length/package.json","includedInParent":true,"mtime":1535727511604},{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/package.json","includedInParent":true,"mtime":1535727539307},{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/.babelrc","includedInParent":true,"mtime":1533206516246},{"name":"safe-buffer","loc":{"line":2,"column":23},"parent":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/@serialport/parser-byte-length/byte-length.js","resolved":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/safe-buffer/index.js"},{"name":"stream","loc":{"line":3,"column":26},"parent":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/@serialport/parser-byte-length/byte-length.js","resolved":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/stream-browserify/index.js"}],"generated":{"js":"\n'use strict'\nconst Buffer = require('safe-buffer').Buffer\nconst Transform = require('stream').Transform\n\n/**\n * Emit data every number of bytes\n * @extends Transform\n * @param {Object} options parser options object\n * @param {Number} options.length the number of bytes on each data event\n * @summary A transform stream that emits data as a buffer after a specific number of bytes are received. Runs in O(n) time.\n * @example\nconst SerialPort = require('serialport')\nconst ByteLength = require('@serialport/parser-byte-length')\nconst port = new SerialPort('/dev/tty-usbserial1')\nconst parser = port.pipe(new ByteLength({length: 8}))\nparser.on('data', console.log) // will have 8 bytes per data event\n */\nclass ByteLengthParser extends Transform {\n  constructor (options) {\n    super(options)\n    options = options || {}\n\n    if (typeof options.length !== 'number') {\n      throw new TypeError('\"length\" is not a number')\n    }\n\n    if (options.length < 1) {\n      throw new TypeError('\"length\" is not greater than 0')\n    }\n\n    this.length = options.length\n    this.position = 0\n    this.buffer = Buffer.alloc(this.length)\n  }\n\n  _transform (chunk, encoding, cb) {\n    let cursor = 0\n    while (cursor < chunk.length) {\n      this.buffer[this.position] = chunk[cursor]\n      cursor++\n      this.position++\n      if (this.position === this.length) {\n        this.push(this.buffer)\n        this.buffer = Buffer.alloc(this.length)\n        this.position = 0\n      }\n    }\n    cb()\n  }\n\n  _flush (cb) {\n    this.push(this.buffer.slice(0, this.position))\n    this.buffer = Buffer.alloc(this.length)\n    cb()\n  }\n}\n\nmodule.exports = ByteLengthParser\n","map":{"mappings":[{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@serialport/parser-byte-length/byte-length.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}}],"sources":{"node_modules/@serialport/parser-byte-length/byte-length.js":"'use strict'\nconst Buffer = require('safe-buffer').Buffer\nconst Transform = require('stream').Transform\n\n/**\n * Emit data every number of bytes\n * @extends Transform\n * @param {Object} options parser options object\n * @param {Number} options.length the number of bytes on each data event\n * @summary A transform stream that emits data as a buffer after a specific number of bytes are received. Runs in O(n) time.\n * @example\nconst SerialPort = require('serialport')\nconst ByteLength = require('@serialport/parser-byte-length')\nconst port = new SerialPort('/dev/tty-usbserial1')\nconst parser = port.pipe(new ByteLength({length: 8}))\nparser.on('data', console.log) // will have 8 bytes per data event\n */\nclass ByteLengthParser extends Transform {\n  constructor (options) {\n    super(options)\n    options = options || {}\n\n    if (typeof options.length !== 'number') {\n      throw new TypeError('\"length\" is not a number')\n    }\n\n    if (options.length < 1) {\n      throw new TypeError('\"length\" is not greater than 0')\n    }\n\n    this.length = options.length\n    this.position = 0\n    this.buffer = Buffer.alloc(this.length)\n  }\n\n  _transform (chunk, encoding, cb) {\n    let cursor = 0\n    while (cursor < chunk.length) {\n      this.buffer[this.position] = chunk[cursor]\n      cursor++\n      this.position++\n      if (this.position === this.length) {\n        this.push(this.buffer)\n        this.buffer = Buffer.alloc(this.length)\n        this.position = 0\n      }\n    }\n    cb()\n  }\n\n  _flush (cb) {\n    this.push(this.buffer.slice(0, this.position))\n    this.buffer = Buffer.alloc(this.length)\n    cb()\n  }\n}\n\nmodule.exports = ByteLengthParser\n"},"lineCount":60}},"hash":"7b7f94ac5c2b419584d4fff5805f403d","cacheData":{"env":{}}}