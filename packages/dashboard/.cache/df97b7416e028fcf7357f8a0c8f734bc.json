{"id":"node_modules/@serialport/parser-regex/regex.js","dependencies":[{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/@serialport/parser-regex/package.json","includedInParent":true,"mtime":1535727511604},{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/package.json","includedInParent":true,"mtime":1535727539307},{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/.babelrc","includedInParent":true,"mtime":1533206516246},{"name":"stream","loc":{"line":2,"column":26},"parent":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/@serialport/parser-regex/regex.js","resolved":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/stream-browserify/index.js"}],"generated":{"js":"'use strict'\nconst Transform = require('stream').Transform\n\n/**\n * A transform stream that uses a regular expression to split the incoming text upon.\n *\n * To use the `Regex` parser provide a regular expression to split the incoming text upon. Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).\n * @extends Transform\n * @example\nconst SerialPort = require('serialport')\nconst Regex = require('@serialport/parser-regex')\nconst port = new SerialPort('/dev/tty-usbserial1')\nconst parser = port.pipe(new Regex({ regex: /[\\r\\n]+/ }))\nparser.on('data', console.log)\n */\nclass RegexParser extends Transform {\n  constructor (options) {\n    const opts = Object.assign({\n      encoding: 'utf8'\n    }, options)\n\n    if (opts.regex === undefined) {\n      throw new TypeError('\"options.regex\" must be a regular expression pattern or object')\n    }\n\n    if (!(opts.regex instanceof RegExp)) {\n      opts.regex = new RegExp(opts.regex)\n    }\n    super(opts)\n\n    this.regex = opts.regex\n    this.data = ''\n  }\n\n  _transform (chunk, encoding, cb) {\n    const data = this.data + chunk\n    const parts = data.split(this.regex)\n    this.data = parts.pop()\n\n    parts.forEach((part) => {\n      this.push(part)\n    })\n    cb()\n  }\n\n  _flush (cb) {\n    this.push(this.data)\n    this.data = ''\n    cb()\n  }\n}\n\nmodule.exports = RegexParser\n","map":{"mappings":[{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@serialport/parser-regex/regex.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}}],"sources":{"node_modules/@serialport/parser-regex/regex.js":"'use strict'\nconst Transform = require('stream').Transform\n\n/**\n * A transform stream that uses a regular expression to split the incoming text upon.\n *\n * To use the `Regex` parser provide a regular expression to split the incoming text upon. Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).\n * @extends Transform\n * @example\nconst SerialPort = require('serialport')\nconst Regex = require('@serialport/parser-regex')\nconst port = new SerialPort('/dev/tty-usbserial1')\nconst parser = port.pipe(new Regex({ regex: /[\\r\\n]+/ }))\nparser.on('data', console.log)\n */\nclass RegexParser extends Transform {\n  constructor (options) {\n    const opts = Object.assign({\n      encoding: 'utf8'\n    }, options)\n\n    if (opts.regex === undefined) {\n      throw new TypeError('\"options.regex\" must be a regular expression pattern or object')\n    }\n\n    if (!(opts.regex instanceof RegExp)) {\n      opts.regex = new RegExp(opts.regex)\n    }\n    super(opts)\n\n    this.regex = opts.regex\n    this.data = ''\n  }\n\n  _transform (chunk, encoding, cb) {\n    const data = this.data + chunk\n    const parts = data.split(this.regex)\n    this.data = parts.pop()\n\n    parts.forEach((part) => {\n      this.push(part)\n    })\n    cb()\n  }\n\n  _flush (cb) {\n    this.push(this.data)\n    this.data = ''\n    cb()\n  }\n}\n\nmodule.exports = RegexParser\n"},"lineCount":54}},"hash":"bf5edc3b53f5376b5c3745e2def2c6c4","cacheData":{"env":{}}}