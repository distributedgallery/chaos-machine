{"id":"node_modules/columnify/utils.js","dependencies":[{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/columnify/package.json","includedInParent":true,"mtime":1535727511832},{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/package.json","includedInParent":true,"mtime":1535727539307},{"name":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/.babelrc","includedInParent":true,"mtime":1533206516246},{"name":"./width","loc":{"line":3,"column":22},"parent":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/columnify/utils.js","resolved":"/Users/osarrouy/Documents/devs/dapps/@distributedgallery/@chaosmachine/packages/dashboard/node_modules/columnify/width.js"}],"generated":{"js":"\"use strict\"\n\nvar wcwidth = require('./width')\n\n/**\n * repeat string `str` up to total length of `len`\n *\n * @param String str string to repeat\n * @param Number len total length of output string\n */\n\nfunction repeatString(str, len) {\n  return Array.apply(null, {length: len + 1}).join(str).slice(0, len)\n}\n\n/**\n * Pad `str` up to total length `max` with `chr`.\n * If `str` is longer than `max`, padRight will return `str` unaltered.\n *\n * @param String str string to pad\n * @param Number max total length of output string\n * @param String chr optional. Character to pad with. default: ' '\n * @return String padded str\n */\n\nfunction padRight(str, max, chr) {\n  str = str != null ? str : ''\n  str = String(str)\n  var length = max - wcwidth(str)\n  if (length <= 0) return str\n  return str + repeatString(chr || ' ', length)\n}\n\n/**\n * Pad `str` up to total length `max` with `chr`.\n * If `str` is longer than `max`, padCenter will return `str` unaltered.\n *\n * @param String str string to pad\n * @param Number max total length of output string\n * @param String chr optional. Character to pad with. default: ' '\n * @return String padded str\n */\n\nfunction padCenter(str, max, chr) {\n  str = str != null ? str : ''\n  str = String(str)\n  var length = max - wcwidth(str)\n  if (length <= 0) return str\n  var lengthLeft = Math.floor(length/2)\n  var lengthRight = length - lengthLeft\n  return repeatString(chr || ' ', lengthLeft) + str + repeatString(chr || ' ', lengthRight)\n}\n\n/**\n * Pad `str` up to total length `max` with `chr`, on the left.\n * If `str` is longer than `max`, padRight will return `str` unaltered.\n *\n * @param String str string to pad\n * @param Number max total length of output string\n * @param String chr optional. Character to pad with. default: ' '\n * @return String padded str\n */\n\nfunction padLeft(str, max, chr) {\n  str = str != null ? str : ''\n  str = String(str)\n  var length = max - wcwidth(str)\n  if (length <= 0) return str\n  return repeatString(chr || ' ', length) + str\n}\n\n/**\n * Split a String `str` into lines of maxiumum length `max`.\n * Splits on word boundaries. Preserves existing new lines.\n *\n * @param String str string to split\n * @param Number max length of each line\n * @return Array Array containing lines.\n */\n\nfunction splitIntoLines(str, max) {\n  function _splitIntoLines(str, max) {\n    return str.trim().split(' ').reduce(function(lines, word) {\n      var line = lines[lines.length - 1]\n      if (line && wcwidth(line.join(' ')) + wcwidth(word) < max) {\n        lines[lines.length - 1].push(word) // add to line\n      }\n      else lines.push([word]) // new line\n      return lines\n    }, []).map(function(l) {\n      return l.join(' ')\n    })\n  }\n  return str.split('\\n').map(function(str) {\n    return _splitIntoLines(str, max)\n  }).reduce(function(lines, line) {\n    return lines.concat(line)\n  }, [])\n}\n\n/**\n * Add spaces and `truncationChar` between words of\n * `str` which are longer than `max`.\n *\n * @param String str string to split\n * @param Number max length of each line\n * @param Number truncationChar character to append to split words\n * @return String\n */\n\nfunction splitLongWords(str, max, truncationChar) {\n  str = str.trim()\n  var result = []\n  var words = str.split(' ')\n  var remainder = ''\n\n  var truncationWidth = wcwidth(truncationChar)\n\n  while (remainder || words.length) {\n    if (remainder) {\n      var word = remainder\n      remainder = ''\n    } else {\n      var word = words.shift()\n    }\n\n    if (wcwidth(word) > max) {\n      // slice is based on length no wcwidth\n      var i = 0\n      var wwidth = 0\n      var limit = max - truncationWidth\n      while (i < word.length) {\n        var w = wcwidth(word.charAt(i))\n        if (w + wwidth > limit) {\n          break\n        }\n        wwidth += w\n        ++i\n      }\n\n      remainder = word.slice(i) // get remainder\n      // save remainder for next loop\n\n      word = word.slice(0, i) // grab truncated word\n      word += truncationChar // add trailing â€¦ or whatever\n    }\n    result.push(word)\n  }\n\n  return result.join(' ')\n}\n\n\n/**\n * Truncate `str` into total width `max`\n * If `str` is shorter than `max`,  will return `str` unaltered.\n *\n * @param String str string to truncated\n * @param Number max total wcwidth of output string\n * @return String truncated str\n */\n\nfunction truncateString(str, max) {\n\n  str = str != null ? str : ''\n  str = String(str)\n\n  if(max == Infinity) return str\n\n  var i = 0\n  var wwidth = 0\n  while (i < str.length) {\n    var w = wcwidth(str.charAt(i))\n    if(w + wwidth > max)\n      break\n    wwidth += w\n    ++i\n  }\n  return str.slice(0, i)\n}\n\n\n\n/**\n * Exports\n */\n\nmodule.exports.padRight = padRight\nmodule.exports.padCenter = padCenter\nmodule.exports.padLeft = padLeft\nmodule.exports.splitIntoLines = splitIntoLines\nmodule.exports.splitLongWords = splitLongWords\nmodule.exports.truncateString = truncateString\n","map":{"mappings":[{"source":"node_modules/columnify/utils.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/columnify/utils.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}}],"sources":{"node_modules/columnify/utils.js":"\"use strict\"\n\nvar wcwidth = require('./width')\n\n/**\n * repeat string `str` up to total length of `len`\n *\n * @param String str string to repeat\n * @param Number len total length of output string\n */\n\nfunction repeatString(str, len) {\n  return Array.apply(null, {length: len + 1}).join(str).slice(0, len)\n}\n\n/**\n * Pad `str` up to total length `max` with `chr`.\n * If `str` is longer than `max`, padRight will return `str` unaltered.\n *\n * @param String str string to pad\n * @param Number max total length of output string\n * @param String chr optional. Character to pad with. default: ' '\n * @return String padded str\n */\n\nfunction padRight(str, max, chr) {\n  str = str != null ? str : ''\n  str = String(str)\n  var length = max - wcwidth(str)\n  if (length <= 0) return str\n  return str + repeatString(chr || ' ', length)\n}\n\n/**\n * Pad `str` up to total length `max` with `chr`.\n * If `str` is longer than `max`, padCenter will return `str` unaltered.\n *\n * @param String str string to pad\n * @param Number max total length of output string\n * @param String chr optional. Character to pad with. default: ' '\n * @return String padded str\n */\n\nfunction padCenter(str, max, chr) {\n  str = str != null ? str : ''\n  str = String(str)\n  var length = max - wcwidth(str)\n  if (length <= 0) return str\n  var lengthLeft = Math.floor(length/2)\n  var lengthRight = length - lengthLeft\n  return repeatString(chr || ' ', lengthLeft) + str + repeatString(chr || ' ', lengthRight)\n}\n\n/**\n * Pad `str` up to total length `max` with `chr`, on the left.\n * If `str` is longer than `max`, padRight will return `str` unaltered.\n *\n * @param String str string to pad\n * @param Number max total length of output string\n * @param String chr optional. Character to pad with. default: ' '\n * @return String padded str\n */\n\nfunction padLeft(str, max, chr) {\n  str = str != null ? str : ''\n  str = String(str)\n  var length = max - wcwidth(str)\n  if (length <= 0) return str\n  return repeatString(chr || ' ', length) + str\n}\n\n/**\n * Split a String `str` into lines of maxiumum length `max`.\n * Splits on word boundaries. Preserves existing new lines.\n *\n * @param String str string to split\n * @param Number max length of each line\n * @return Array Array containing lines.\n */\n\nfunction splitIntoLines(str, max) {\n  function _splitIntoLines(str, max) {\n    return str.trim().split(' ').reduce(function(lines, word) {\n      var line = lines[lines.length - 1]\n      if (line && wcwidth(line.join(' ')) + wcwidth(word) < max) {\n        lines[lines.length - 1].push(word) // add to line\n      }\n      else lines.push([word]) // new line\n      return lines\n    }, []).map(function(l) {\n      return l.join(' ')\n    })\n  }\n  return str.split('\\n').map(function(str) {\n    return _splitIntoLines(str, max)\n  }).reduce(function(lines, line) {\n    return lines.concat(line)\n  }, [])\n}\n\n/**\n * Add spaces and `truncationChar` between words of\n * `str` which are longer than `max`.\n *\n * @param String str string to split\n * @param Number max length of each line\n * @param Number truncationChar character to append to split words\n * @return String\n */\n\nfunction splitLongWords(str, max, truncationChar) {\n  str = str.trim()\n  var result = []\n  var words = str.split(' ')\n  var remainder = ''\n\n  var truncationWidth = wcwidth(truncationChar)\n\n  while (remainder || words.length) {\n    if (remainder) {\n      var word = remainder\n      remainder = ''\n    } else {\n      var word = words.shift()\n    }\n\n    if (wcwidth(word) > max) {\n      // slice is based on length no wcwidth\n      var i = 0\n      var wwidth = 0\n      var limit = max - truncationWidth\n      while (i < word.length) {\n        var w = wcwidth(word.charAt(i))\n        if (w + wwidth > limit) {\n          break\n        }\n        wwidth += w\n        ++i\n      }\n\n      remainder = word.slice(i) // get remainder\n      // save remainder for next loop\n\n      word = word.slice(0, i) // grab truncated word\n      word += truncationChar // add trailing â€¦ or whatever\n    }\n    result.push(word)\n  }\n\n  return result.join(' ')\n}\n\n\n/**\n * Truncate `str` into total width `max`\n * If `str` is shorter than `max`,  will return `str` unaltered.\n *\n * @param String str string to truncated\n * @param Number max total wcwidth of output string\n * @return String truncated str\n */\n\nfunction truncateString(str, max) {\n\n  str = str != null ? str : ''\n  str = String(str)\n\n  if(max == Infinity) return str\n\n  var i = 0\n  var wwidth = 0\n  while (i < str.length) {\n    var w = wcwidth(str.charAt(i))\n    if(w + wwidth > max)\n      break\n    wwidth += w\n    ++i\n  }\n  return str.slice(0, i)\n}\n\n\n\n/**\n * Exports\n */\n\nmodule.exports.padRight = padRight\nmodule.exports.padCenter = padCenter\nmodule.exports.padLeft = padLeft\nmodule.exports.splitIntoLines = splitIntoLines\nmodule.exports.splitLongWords = splitLongWords\nmodule.exports.truncateString = truncateString\n"},"lineCount":194}},"hash":"d90b29a297a68353dbf343039f97885e","cacheData":{"env":{}}}