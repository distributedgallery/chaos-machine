{"version":3,"sources":["commands/daemon/index.ts","commands/index.ts","devices/cash.js","devices/printer.js","devices/relay.js","devices/lcd.js","machine/index.ts","index.ts"],"names":["SSP","require","EventEmitter","notes","value","display","Cash","opts","port","Error","ssp","init","on","enable","emit","id","isOpened","disable","module","exports","SerialPort","QRCode","ThPrinter","Printer","serialPort","printer","text","toString","err","result","lines","split","setLineSpacing","center","forEach","line","printLine","substring","length","writeCommands","lineFeed","print","close","Gpio","Relay","pin","accessible","gpio","console","log","writeSync","unexport","LCD","Lcd","rs","e","data","lcd","cb","setCursor"],"mappings":";AAsCA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,EAAA,MAAA,KAAA,aAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,MAAA,EAAA,KAAA,WAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,KAAA,GAAA,IAAA,IAAA,OAAA,EAAA,CAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,mBAAA,SAAA,EAAA,OAAA,UAAA,WAAA,OAAA,OAAA,EAAA,SAAA,EAAA,GAAA,OAAA,SAAA,GAAA,OAAA,SAAA,GAAA,GAAA,EAAA,MAAA,IAAA,UAAA,mCAAA,KAAA,GAAA,IAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,GAAA,EAAA,SAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,KAAA,OAAA,EAAA,OAAA,EAAA,EAAA,IAAA,EAAA,CAAA,EAAA,EAAA,GAAA,EAAA,QAAA,EAAA,IAAA,KAAA,EAAA,KAAA,EAAA,EAAA,EAAA,MAAA,KAAA,EAAA,OAAA,EAAA,QAAA,CAAA,MAAA,EAAA,GAAA,MAAA,GAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,GAAA,EAAA,CAAA,GAAA,SAAA,KAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,QAAA,KAAA,GAAA,EAAA,EAAA,MAAA,OAAA,GAAA,EAAA,EAAA,OAAA,MAAA,IAAA,EAAA,IAAA,IAAA,EAAA,IAAA,CAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,MAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,CAAA,EAAA,MAAA,EAAA,GAAA,MAAA,GAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,MAAA,GAAA,GAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,KAAA,GAAA,MAAA,EAAA,IAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,EAAA,EAAA,KAAA,EAAA,GAAA,MAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,MAAA,CAAA,MAAA,EAAA,GAAA,EAAA,QAAA,EAAA,MAAA,GAAA,CAAA,CAAA,EAAA,OAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAtCA,EAAA,KAsCA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAtCA,IAAA,EAAA,EAAA,QAAA,UAEM,EAAU,WACP,OAAA,EAAA,QACJ,OAAO,SAAU,CACT,MAAA,IACG,SAAA,2BACJ,KAAA,YAEP,OACA,SAAQ,IAGP,EAAU,SAAM,GAAI,OAAA,EAAA,OAAA,OAAA,EAAA,WAyB1B,OAAA,EAAA,KAAA,SAAA,GAAA,MAAA,CAAA,QANa,QAAA,OAAS,CACX,QAAA,SACH,KAAA,8BACC,QAAA,EACA,QAAA;;ACpCT,aAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,QAAA,eAAA,KAAA,QAAA,GAAA,EAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,EAAA,QAAA;;ACsCA,IAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,UAAA,GAAA,IAAA,IAAA,KAAA,EAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,GAtCA,MAAMA,EAAMC,QAAQ,wBACdC,EAAeD,QAAQ,UAEvBE,EAAQ,CACV,EAAA,CAAEC,MAAO,EAAGC,QAAS,MACrB,EAAA,CAAED,MAAO,GAAIC,QAAS,OACtB,EAAA,CAAED,MAAO,GAAIC,QAAS,OACtB,EAAA,CAAED,MAAO,GAAIC,QAAS,OACtB,EAAA,CAAED,MAAO,IAAKC,QAAS,QACvB,EAAA,CAAED,MAAO,IAAKC,QAAS,SAG3B,MAAMC,UAAaJ,EACNK,YAAAA,GAEP,GADJ,SACKA,EAAKC,KAAM,MAAM,IAAIC,MAAM,wCAC3BC,KAAAA,IAAM,IAAIV,EAAI,CACVO,OAAAA,EAAKC,KACP,KAAA,UACM,WAAA,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,KAExBE,KAAAA,IAAIC,MAAK,EAAM,KACdD,KAAAA,IAAIE,GAAG,QAAS,KACfF,KAAAA,IAAIG,OAAO,IAAM,KAAKC,KAAK,YAE5BJ,KAAAA,IAAIE,GAAG,YAAaG,IACpBA,EAAK,GAAG,KAAKD,KAAK,OAAUC,EAAAA,CAAAA,GAAAA,GAAOZ,EAAMY,OAEzCL,KAAAA,IAAIE,GAAG,cAAeG,IACtBA,EAAK,GAAG,KAAKD,KAAK,WAAcC,EAAAA,CAAAA,GAAAA,GAAOZ,EAAMY,SAI5C,QACH,KAAKL,IAAIF,MAAQ,KAAKE,IAAIF,KAAKQ,UAAU,KAAKN,IAAIO,WAIxDC,OAAOC,QAAUb;;ACtCjB,MAAMc,EAAanB,QAAQ,cACrBoB,EAASpB,QAAQ,UACjBqB,EAAYrB,QAAQ,kBACpBC,EAAeD,QAAQ,UAE7B,MAAMsB,UAAgBrB,EACTK,YAAAA,GAEP,GADJ,SACKA,EAAKC,KAAM,MAAM,IAAIC,MAAM,2CAC3Be,KAAAA,WAAa,IAAIJ,EAAWb,EAAKC,KAAM,CACjC,SAAA,QAENgB,KAAAA,WAAWZ,GAAG,OAAQ,KACrBa,KAAAA,QAAU,IAAIH,EAAU,KAAKE,YAC7BC,KAAAA,QAAQb,GAAG,QAAS,IAAM,KAAKE,KAAK,YAIrCY,MAAAA,GACEC,EAAAA,SAASD,EAAM,CAACE,EAAKC,KACrBC,MAAAA,EAAQD,EAAOE,MAAM,MACtBN,KAAAA,QAAQO,eAAe,GACvBP,KAAAA,QAAQQ,SACPC,EAAAA,QAAQC,GAAQ,KAAKV,QAAQW,UAAUD,EAAKE,UAAU,EAAGF,EAAKG,OAAS,KACxEb,KAAAA,QAAQc,cAAc,CAAC,GAAI,KAC3Bd,KAAAA,QAAQe,SAAS,GACjBf,KAAAA,QAAQgB,MAAM,IAAM,KAAK3B,KAAK,OAAQY,MAIrC,QACH,KAAKF,YAAc,KAAKA,WAAWR,UAAU,KAAKQ,WAAWkB,SAInExB,OAAOC,QAAUI;;ACnCjB,MAAMoB,EAAO1C,QAAQ,SAAS0C,KAE9B,MAAMC,EACOrC,YAAAA,GACP,IAACA,EAAKsC,IAAK,MAAM,IAAIpC,MAAM,iCAC3BkC,EAAKG,WAAY,KAAKC,KAAO,IAAIJ,EAAKpC,EAAKsC,IAAK,OAE9CE,KAAAA,KAAO,CACA3C,UAAAA,GAAS4C,QAAQC,gBAAgB7C,KAClC,SAAA,IAAM4C,QAAQC,IAAK,gBAKvB,SACHF,KAAAA,KAAKG,UAAU,GAGX,UACJH,KAAAA,KAAKG,UAAU,GAGb,QACHP,EAAKG,YAAY,KAAKC,KAAKI,YAIjCjC,OAAOC,QAAUyB;;AC3BjB,MAAMQ,EAAMnD,QAAQ,OACdC,EAAeD,QAAQ,UAE7B,MAAMoD,UAAYnD,EACLK,YAAAA,GAEP,GADJ,SACKA,EAAK+C,KAAO/C,EAAKgD,IAAMhD,EAAKiD,MAA6B,IAArBjD,EAAKiD,KAAKlB,OAClD,MAAM,IAAI7B,MAAM,2CACZgD,KAAAA,IAAM,IAAIL,EAAI7C,GACdkD,KAAAA,IAAI7C,GAAG,QAAS,IAAM,KAAKE,KAAK,UAGhCY,MAAAA,EAAMgC,GACND,KAAAA,IAAIE,UAAU,EAAG,GACjBF,KAAAA,IAAIhB,MAAMf,EAAME,GAAO8B,GAAMA,EAAG9B,IAG9B,QACH,KAAK6B,KAAK,KAAKA,IAAIf,SAIzBxB,OAAOC,QAAUkC;;ACLjB,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,EAAA,MAAA,KAAA,WAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,IAAA,EAAA,UAAA,SAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,KAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,MAAA,IAAA,MAAA,GAAA,EAAA,IAAA,SAAA,EAAA,GAAA,EAAA,KAAA,EAAA,EAAA,OAAA,IAAA,EAAA,SAAA,GAAA,EAAA,EAAA,SAAA,KAAA,EAAA,GAAA,GAAA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,WAAA,EAAA,MAAA,KAAA,aAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,MAAA,EAAA,KAAA,WAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,KAAA,GAAA,IAAA,IAAA,OAAA,EAAA,CAAA,KAAA,EAAA,GAAA,MAAA,EAAA,GAAA,OAAA,EAAA,IAAA,mBAAA,SAAA,EAAA,OAAA,UAAA,WAAA,OAAA,OAAA,EAAA,SAAA,EAAA,GAAA,OAAA,SAAA,GAAA,OAAA,SAAA,GAAA,GAAA,EAAA,MAAA,IAAA,UAAA,mCAAA,KAAA,GAAA,IAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,SAAA,EAAA,EAAA,SAAA,EAAA,KAAA,GAAA,GAAA,EAAA,SAAA,EAAA,EAAA,KAAA,EAAA,EAAA,KAAA,KAAA,OAAA,EAAA,OAAA,EAAA,EAAA,IAAA,EAAA,CAAA,EAAA,EAAA,GAAA,EAAA,QAAA,EAAA,IAAA,KAAA,EAAA,KAAA,EAAA,EAAA,EAAA,MAAA,KAAA,EAAA,OAAA,EAAA,QAAA,CAAA,MAAA,EAAA,GAAA,MAAA,GAAA,KAAA,EAAA,EAAA,QAAA,EAAA,EAAA,GAAA,EAAA,CAAA,GAAA,SAAA,KAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,QAAA,KAAA,GAAA,EAAA,EAAA,MAAA,OAAA,GAAA,EAAA,EAAA,OAAA,MAAA,IAAA,EAAA,IAAA,IAAA,EAAA,IAAA,CAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,MAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,CAAA,EAAA,MAAA,EAAA,GAAA,MAAA,GAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,MAAA,GAAA,GAAA,EAAA,MAAA,EAAA,GAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,KAAA,GAAA,MAAA,EAAA,IAAA,EAAA,IAAA,MAAA,EAAA,KAAA,MAAA,SAAA,EAAA,EAAA,KAAA,EAAA,GAAA,MAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,MAAA,EAAA,GAAA,MAAA,CAAA,MAAA,EAAA,GAAA,EAAA,QAAA,EAAA,MAAA,GAAA,CAAA,CAAA,EAAA,OAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAjBA,IAAA,EAAA,EAAA,QAAA,cACA,EAAA,EAAA,QAAA,qBACA,EAAA,EAAA,QAAA,aACA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,SACA,EAAA,EAAA,QAAA,8BACA,EAAA,EAAA,QAAA,WACA,EAAA,EAAA,QAAA,SAEM,EAAW,CACP,KAAA,8BACI,SAAA,gEACA,SAAA,4EACD,QAAA,8CAIb,EAAA,SAAA,GA6BE,SAAA,EAAY,GAAA,IAAA,OAAA,IAAA,EAAA,GAAA,EAAE,EAAA,EAAA,KAAA,OAAA,IAAA,EAAA,EAAA,KAAA,EAAsB,EAAA,EAAA,SAAA,OAAA,IAAA,EAAA,EAAA,SAAA,EAA8B,EAAA,EAAA,SAAA,OAAA,IAAA,EAAA,EAAA,SAAA,EAA8B,EAAA,EAAA,QAAA,OAAA,IAAA,EAAA,EAAA,QAAA,EAAhG,EACE,EAAA,KAAA,OAAO,KAED,EAAM,EAAA,QAAO,GAhCvB,OAiCS,EAAA,KAAO,EAAA,QAAK,EAAI,SAAU,EAAI,KAAM,CAAE,SAAU,EAAI,SAAS,MAAM,GAAI,KAEvE,EAAA,SAAW,EAEX,EAAA,SAAW,IAAI,EAAA,QAAiB,EAAU,GAE1C,EAAA,YAAc,EAAA,QAAW,QAAQ,kDACjC,EAAA,YAAY,YAAY,EAAK,UAE7B,EAAA,QAAU,EA1CnB,EAwDA,OAxD0C,EAAA,EAAA,GAQpB,EAAA,OAApB,SAA2B,GAAa,OAAA,EAAA,UAAA,EAAA,QAAO,WARjD,IAAA,EAAA,EAAA,EAAA,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EAYwB,OAHA,EAAA,IAAI,EAAa,GACjB,EAAA,IAAI,EAAA,QAAK,EAAQ,UAEjB,CAAA,EADA,EAAA,QAAK,UAAU,EAAK,IAAI,YAClB,IAZ9B,KAAA,EA0BI,OAdoB,EAAA,EAAA,OAEZ,EAAA,YAAY,SAAS,CAAE,KAAM,EAAS,KACtC,EAAA,SAAW,EAAQ,YAAY,GAAG,EAAQ,SAEpC,EAAQ,SAAS,aAAa,GAAI,CAAE,UAAW,SAAU,QAAS,WAC1E,MAAM,SAAC,EAAK,GACZ,EACM,EAAA,KAAK,QAAS,GAEd,EAAA,KAAK,eAAgB,KAIjC,CAAA,EAAO,SAoBF,EAAA,UAAA,cAAP,WACS,OAAA,EAAA,QAAU,kBAGN,EAAA,UAAA,cAAb,SAA2B,EAAiB,GAAa,OAAA,EAAA,UAAA,EAAA,QAAO,WAlDlE,IAAA,EAAA,OAAA,EAAA,KAAA,SAAA,GAAA,OAAA,EAAA,OAAA,KAAA,EAmDqB,MAAA,CAAA,EAAM,KAAK,SAAS,WAAW,YAAY,IAnDhE,KAAA,EAoDqB,OADA,EAAA,EAAA,OACA,CAAA,EAAM,KAAK,SAAS,WAAW,EAAO,EAAA,CAAI,IAAK,EAAI,GAAa,KApDrF,KAAA,EAsDI,MAAA,CAAA,EAFiB,EAAA,cAIrB,EAxDA,CAA0C,EAAA,SAA1C,QAAA,QAAA;;ACwDA,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,EAAA,MAAA,KAAA,cAAA,SAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,OAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,EAAA,QAAA,EAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAvEA,IAAA,EAAA,EAAA,QAAA,UACA,EAAA,EAAA,QAAA,eAEM,EAAO,EAAA,QACV,MAAM,mBACN,QAAQ,EAAS,QACjB,cAAc,EAAG,uBACjB,SACA,OACA,MAAM,IAAK,QAAQ,KAEhB,EAAS,QAAQ,kBACjB,EAAU,QAAQ,qBAClB,EAAS,QAAQ,mBACjB,EAAQ,QAAQ,iBAEtB,EAAA,EAAA,QAAA,cAQM,EAAU,IAAI,EAAA,QAkCpB,QAAQ,GAAG,SAAU,WAAM,OAAA,QAAQ,KAAK,KACxC,QAAQ,GAAG,oBAAqB,SAAA,GACvB,QAAA,IAAI,EAAI,OACL,WAAA,WACF,QAAA,KAAK,IACX","file":"chaos.map","sourceRoot":"../src","sourcesContent":["import yargs from 'yargs'\n\nconst builder = () => {\n  return yargs\n    .option('global', {\n      alias: 'g',\n      describe: 'Configure pando globally',\n      type: 'boolean'\n    })\n    .help()\n    .version(false)\n}\n\nconst handler = async argv => {\n  try {\n    // if (argv.global) {\n    //   const configuration = await prompt.configure()\n    //   config.save(configuration)\n    // } else {\n    //   const configuration = await prompt.configure()\n    //   const pando = await Pando.create(configuration)\n    //   const repository = await pando.repositories.load()\n    //   repository.config = configuration\n    // }\n    // display.status('updated')\n  } catch (err) {\n\n    // display.error(err.message)\n  }\n}\n\n/* tslint:disable:object-literal-sort-keys */\nexport const daemon = {\n  command: 'daemon',\n  desc: 'Launch Chaos Machine daemon',\n  builder,\n  handler\n}\n/* tslint:enable:object-literal-sort-keys */\n","export * from './daemon'\n","const SSP = require('@xavier.seignard/ssp');\nconst EventEmitter = require('events');\n\nconst notes = {\n\t1: { value: 5, display: '5€' },\n\t2: { value: 10, display: '10€' },\n\t3: { value: 20, display: '20€' },\n\t4: { value: 50, display: '50€' },\n\t5: { value: 100, display: '100€' },\n\t6: { value: 500, display: '500€' },\n};\n\nclass Cash extends EventEmitter {\n\tconstructor(opts) {\n\t\tsuper();\n\t\tif (!opts.port) throw new Error('[Cash] Please specify a serial port!');\n\t\tthis.ssp = new SSP({\n\t\t\tdevice: opts.port,\n\t\t\ttype: 'nv10usb',\n\t\t\tcurrencies: [1, 1, 1, 1, 1, 1],\n\t\t});\n\t\tthis.ssp.init(true, () => {\n\t\t\tthis.ssp.on('ready', () => {\n\t\t\t\tthis.ssp.enable(() => this.emit('ready'));\n\t\t\t});\n\t\t\tthis.ssp.on('read_note', id => {\n\t\t\t\tif (id > 0) this.emit('read', { id, ...notes[id] });\n\t\t\t});\n\t\t\tthis.ssp.on('credit_note', id => {\n\t\t\t\tif (id > 0) this.emit('accepted', { id, ...notes[id] });\n\t\t\t});\n\t\t});\n\t}\n\tclose() {\n\t\tif (this.ssp.port && this.ssp.port.isOpened) this.ssp.disable();\n\t}\n}\n\nmodule.exports = Cash;\n","const SerialPort = require('serialport');\nconst QRCode = require('qrcode');\nconst ThPrinter = require('thermalprinter');\nconst EventEmitter = require('events');\n\nclass Printer extends EventEmitter {\n\tconstructor(opts) {\n\t\tsuper();\n\t\tif (!opts.port) throw new Error('[Printer] Please specify a serial port!');\n\t\tthis.serialPort = new SerialPort(opts.port, {\n\t\t\tbaudRate: 19200,\n\t\t});\n\t\tthis.serialPort.on('open', () => {\n\t\t\tthis.printer = new ThPrinter(this.serialPort);\n\t\t\tthis.printer.on('ready', () => this.emit('ready'));\n\t\t});\n\t}\n\n\tprint(text) {\n\t\tQRCode.toString(text, (err, result) => {\n\t\t\tconst lines = result.split('\\n');\n\t\t\tthis.printer.setLineSpacing(0);\n\t\t\tthis.printer.center();\n\t\t\tlines.forEach(line => this.printer.printLine(line.substring(2, line.length - 2)));\n\t\t\tthis.printer.writeCommands([27, 50]);\n\t\t\tthis.printer.lineFeed(2);\n\t\t\tthis.printer.print(() => this.emit('done', text));\n\t\t});\n\t}\n\n\tclose() {\n\t\tif (this.serialPort && this.serialPort.isOpened) this.serialPort.close();\n\t}\n}\n\nmodule.exports = Printer;\n","const Gpio = require('onoff').Gpio;\n\nclass Relay {\n\tconstructor(opts) {\n\t\tif (!opts.pin) throw new Error('[Relay] Please specify a pin!');\n\t\tif (Gpio.accessible) this.gpio = new Gpio(opts.pin, 'out');\n\t\telse {\n\t\t\tthis.gpio = {\n\t\t\t\twriteSync: value => console.log(`writing: ${value}`),\n\t\t\t\tunexport: () => console.log(`unexporting`),\n\t\t\t};\n\t\t}\n\t}\n\n\tturnOn() {\n\t\tthis.gpio.writeSync(1);\n\t}\n\n\tturnOff() {\n\t\tthis.gpio.writeSync(0);\n\t}\n\n\tclose() {\n\t\tif (Gpio.accessible) this.gpio.unexport();\n\t}\n}\n\nmodule.exports = Relay;\n","const LCD = require('lcd');\nconst EventEmitter = require('events');\n\nclass Lcd extends EventEmitter {\n\tconstructor(opts) {\n\t\tsuper();\n\t\tif (!opts.rs || !opts.e || !opts.data || opts.data.length !== 4)\n\t\t\tthrow new Error('[Lcd] Please specifiy the correct pins!');\n\t\tthis.lcd = new LCD(opts);\n\t\tthis.lcd.on('ready', () => this.emit('ready'));\n\t}\n\n\twrite(text, cb) {\n\t\tthis.lcd.setCursor(0, 0);\n\t\tthis.lcd.print(text, err => cb && cb(err));\n\t}\n\n\tclose() {\n\t\tif (this.lcd) this.lcd.close();\n\t}\n}\n\nmodule.exports = Lcd;\n","import parser           from 'url-parse'\nimport contractor       from 'truffle-contract'\nimport IPFS             from 'ipfs-api'\nimport EthCrypto        from 'eth-crypto'\nimport Web3             from 'web3'\nimport HDWalletProvider from 'truffle-hdwallet-provider'\nimport EventEmitter     from 'events'\nimport util             from 'util'\n\nconst DEFAULTS = {\n    IPFS: 'https://ipfs.infura.io:5001',\n    ETHEREUM: 'https://mainnet.infura.io/v3/ab05225130e846b28dc1bb71d6d96f09',\n    MNEMONIC: 'journey nice rather ball theme used uncover gate pond rifle between state',\n    ADDRESS: '0x7e8dcb7432b8356635f2820b8e92fa6d760609fe'\n}\n\n\nexport default class ChaosMachine extends EventEmitter {\n  public ipfs:        any\n  public provider:    any\n  public mnemonic:    string\n  public abstraction: any\n  public address:     string\n  public contract:    any\n\n  public static async create(opts?: any): Promise<ChaosMachine> {\n    const machine     = new ChaosMachine(opts)\n    const web3        = new Web3(machine.provider)\n    const getAccounts = util.promisify(web3.eth.getAccounts)\n    const accounts    = await getAccounts()\n\n    machine.abstraction.defaults({ from: accounts[0] })\n    machine.contract = machine.abstraction.at(machine.address)\n\n    const event = machine.contract.TokenGranted({}, { fromBlock: 'latest', toBlock: 'latest' })\n    event.watch((err, result) => {\n      if (err) {\n        machine.emit('error', err)\n      } else {\n        machine.emit('tokenGranted', result)\n      }\n    })\n\n    return machine\n  }\n\n  constructor({ ipfs = DEFAULTS.IPFS, ethereum = DEFAULTS.ETHEREUM, mnemonic = DEFAULTS.MNEMONIC, address = DEFAULTS.ADDRESS }: { ipfs?: string; ethereum?: string; mnemonic?: string; address?: string } = {}) {\n    super()\n    // IPFS\n    const url = parser(ipfs)\n    this.ipfs = IPFS(url.hostname, url.port, { protocol: url.protocol.slice(0, -1) })\n    // mnemonic\n    this.mnemonic = mnemonic\n    // HDWallet provider\n    this.provider = new HDWalletProvider(mnemonic, ethereum)\n    // abstraction\n    this.abstraction = contractor(require('@chaosmachine/core/build/contracts/Chaos.json'))\n    this.abstraction.setProvider(this.provider)\n    // address\n    this.address = address\n\n  }\n\n  public generateToken(): any {\n    return EthCrypto.createIdentity()\n  }\n\n  public async registerToken(address: string, opts?: any): Promise<any> {\n    const estimate = await this.contract.grantToken.estimateGas(address)\n    const receipt  = await this.contract.grantToken(address, { gas: 2 * estimate, ...opts })\n\n    return receipt\n  }\n}\n","#!/usr/bin/node\n\nimport yargs from 'yargs'\nimport * as commands from './commands'\n\nconst argv = yargs\n  .usage('chaos <command>')\n  .command(commands.daemon)\n  .demandCommand(1, 'No command provided')\n  .strict()\n  .help()\n  .alias('h', 'help').argv\n\nconst Cash \t\t= require('./devices/cash')\nconst Printer = require('./devices/printer')\nconst Relay \t= require('./devices/relay')\nconst LCD \t\t= require('./devices/lcd')\n\nimport ChaosMachine from './machine'\n\n// Initialize devices\n// const cash \t\t= new Cash({ port: '/dev/cash' })\n// const printer \t= new Printer({ port: '/dev/printer' })\n// const fans \t\t= new Relay({ pin: 4 })\n// const resistor = new Relay({ pin: 3 })\n// const lcd \t\t\t= new Lcd({ rs: 25, e: 24, data: [23, 17, 27, 22] })\nconst machine = new ChaosMachine()\n\n// Initialization log\n// cash.on('ready', () => console.log('[Cash] ready'))\n// printer.on('ready', () => console.log('[Printer] ready'))\n// lcd.on('ready', () => console.log('[LCD] ready'))\n\n\n// cash machine accepted a note\n// cash.on('accepted',async  () => {\n// \ttry {\n// \t\tconst token = chaos.generateToken()\n// \t\tprinter.print('https://chaos.distributedgallery.com/upload?token=' + token.privateKey)\n// \t\tconst receipt = await chaos.registerToken(token.address)\n// \t} catch (err) {\n// \t\tconsole.log('[Error][TGE][' + err + ']')\n// \t}\n//\n//\n// })\n\n// chaos.on('burnminted', () => {\n//\n// })\n//\n// chaos.watch((err, result) => {\n// \tconst cid = chaos.shuffle\n// \tif(!file.exists(cid)) { on télécharge}\n// \tplay\n// \thttps://www.npmjs.com/package/node-mp3-player\n// })\n\n\n// Closing process properly\nprocess.on('SIGINT', () => process.exit(0))\nprocess.on('uncaughtException', err => {\n\tconsole.log(err.stack)\n\tsetTimeout(() => {\n\t\tprocess.exit(1)\n\t}, 500)\n})\n// process.on('exit', () => {\n// \tcash.close()\n// \tprinter.close()\n// \tfans.close()\n// \tresistor.close()\n// \tlcd.close()\n// })\n"]}